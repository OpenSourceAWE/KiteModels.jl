var documenterSearchIndex = {"docs":
[{"location":"ram_air_kite/#Introduction","page":"SymbolicAWEModel","title":"Introduction","text":"","category":"section"},{"location":"ram_air_kite/","page":"SymbolicAWEModel","title":"SymbolicAWEModel","text":"The SystemStructure provides a flexible framework for defining the physical structure of airborne wind energy (AWE) systems using discrete mass-spring-damper models. This structure can represent many different AWE system configurations, from simple single-line kites to complex multi-wing systems with intricate bridle networks.","category":"page"},{"location":"ram_air_kite/","page":"SymbolicAWEModel","title":"SymbolicAWEModel","text":"The SystemStructure serves as input to the SymbolicAWEModel, which is based on ModelingToolkit and automatically generates symbolic differential algebraic equations from the structural definition.","category":"page"},{"location":"ram_air_kite/#Workflow","page":"SymbolicAWEModel","title":"Workflow","text":"","category":"section"},{"location":"ram_air_kite/","page":"SymbolicAWEModel","title":"SymbolicAWEModel","text":"Define system components (Point, Segment, Group, etc.) \nAssemble into a SystemStructure\nPass to SymbolicAWEModel for automatic MTK model generation\nSimulate the resulting symbolic model","category":"page"},{"location":"ram_air_kite/#Public-enumerations","page":"SymbolicAWEModel","title":"Public enumerations","text":"","category":"section"},{"location":"ram_air_kite/#KiteModels.SegmentType","page":"SymbolicAWEModel","title":"KiteModels.SegmentType","text":"SegmentType `POWER_LINE` `STEERING_LINE` `BRIDLE`\n\nType of segment.\n\nElements\n\nPOWER_LINE: Belongs to a power line\nSTEERING_LINE: Belongs to a steering line\nBRIDLE: Belongs to the bridle\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.DynamicsType","page":"SymbolicAWEModel","title":"KiteModels.DynamicsType","text":"DynamicsType `DYNAMIC` `QUASI_STATIC` `WING` `STATIC`\n\nEnumeration of the models that are attached to a point.\n\nElements\n\nDYNAMIC: Belongs to a dynamic tether model\nQUASI_STATIC: Belongs to a quasi static tether model\nWING: Connected to the rigid wing body\nSTATIC: Does not change position\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#Public-constructors","page":"SymbolicAWEModel","title":"Public constructors","text":"","category":"section"},{"location":"ram_air_kite/#KiteModels.SystemStructure-Tuple{Any, Any}","page":"SymbolicAWEModel","title":"KiteModels.SystemStructure","text":"SystemStructure(name, set; points=Point[], groups=Group[], segments=Segment[], \n               pulleys=Pulley[], tethers=Tether[], winches=Winch[], \n               wings=Wing[], transforms=Transform[])\n\nConstructs a SystemStructure object representing a complete kite system using a discrete mass-spring-damper model.\n\nComponents\n\nPoints - See Point for discrete mass dynamics\nSegments - See Segment for elastic spring-damper connections  \nGroups - See Group for wing twist deformation modeling\nWings - See Wing for rigid body dynamics\nPulleys - See Pulley for length redistribution between segments\nTethers - See Tether for segment groups with shared unstretched length\nWinches - See Winch for ground-based tether length control\nTransforms - See Transform for initial positioning and orientation\n\nPhysical Models\n\n\"ram\": 4 deformable wing groups, complex pulley bridle system\n\"simple_ram\": 4 deformable wing groups, direct bridle connections\n\nArguments\n\nname::String: Model identifier. \"ram\" and \"simple_ram\" are defined inside KiteModels.jl, provide a different name for a custom model.\nset::Settings: Configuration parameters (see KiteUtils.Settings)\n\nReturns\n\nSystemStructure: Complete system ready for building a SymbolicAWEModel\n\nExamples\n\n# Auto-generate from wing geometry\nwing = RamAirWing(set)\nsys_struct = SystemStructure(set, wing)\n\n# Manual construction\npoints = [Point(1, [0,0,0], STATIC), Point(2, [0,0,10], DYNAMIC)]\nsegments = [Segment(1, (1,2), BRIDLE)]\nsys_struct = SystemStructure(\"custom\", set; points, segments)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.SystemStructure","page":"SymbolicAWEModel","title":"KiteModels.SystemStructure","text":"struct SystemStructure\n\nA discrete mass-spring-damper representation of a kite system, where point masses  connected by elastic segments model the kite and tether dynamics.\n\nComponents\n\nPoint: Point masses representing wing attachment points, dynamic bridle/tether points, and fixed ground anchors\nGroup: Collections of points that move together according to wing deformation (twist and trailing edge deflection)\nSegment: Spring-damper elements connecting points\nPulley: Elements that redistribute line lengths between segments\nTether: Groups of segments with a common unstretched length\nWinch: Ground-based winches that control tether lengths\nWing: Rigid wing bodies that serve as reference frames\nTransform: Spatial transformations for initial positioning and orientation\n\nSee the individual component documentation for detailed mathematical models and governing equations.\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.SymbolicAWEModel-Tuple{Settings, SystemStructure, Vector{<:BodyAerodynamics}, Vector{<:Solver}}","page":"SymbolicAWEModel","title":"KiteModels.SymbolicAWEModel","text":"SymbolicAWEModel(set::Settings, sys_struct::SystemStructure, \n                 vsm_aeros::Vector{<:BodyAerodynamics}=BodyAerodynamics[], \n                 vsm_solvers::Vector{<:VortexStepMethod.Solver}=VortexStepMethod.Solver[])\n\nConstructs a SymbolicAWEModel that can generate ModelingToolkit equations from the discrete mass-spring-damper representation defined in the SystemStructure. The aerodynamic models provide forces and moments acting on wing components.\n\nArguments\n\nset::Settings: Configuration parameters (see KiteUtils.Settings)\nsys_struct::SystemStructure: Physical system definition with points, segments, groups, etc.\nvsm_aeros::Vector{<:BodyAerodynamics}=BodyAerodynamics[]: Aerodynamic models for each wing\nvsm_solvers::Vector{<:VortexStepMethod.Solver}=VortexStepMethod.Solver[]: VSM solvers for aerodynamic calculations\n\nReturns\n\nSymbolicAWEModel: Model ready for symbolic equation generation via init!\n\nExample\n\n# Create wing geometry and aerodynamics\nset = se()\nwing = RamAirWing(set)\naero = BodyAerodynamics([wing])\nsolver = Solver(aero; solver_type=NONLIN)\n\n# Create system structure\nsys_struct = SystemStructure(set, wing)\n\n# Create symbolic model\nmodel = SymbolicAWEModel(set, sys_struct, [aero], [solver])\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.SymbolicAWEModel-Tuple{Settings}","page":"SymbolicAWEModel","title":"KiteModels.SymbolicAWEModel","text":"SymbolicAWEModel(set::Settings)\n\nConstructs a default SymbolicAWEModel with automatically generated components.\n\nThis convenience constructor creates a complete AWE model using default configurations:\n\nGenerates a ram-air wing from settings\nCreates aerodynamic model and VSM solver\nBuilds system structure based on the wing geometry\nAssembles everything into a ready-to-use symbolic model\n\nArguments\n\nset::Settings: Configuration parameters (see KiteUtils.Settings)\n\nReturns\n\nSymbolicAWEModel: Model ready for symbolic equation generation via init!\n\nExample\n\nset = se()  # Load default settings\nmodel = SymbolicAWEModel(set)\n\n# Initialize and run simulation\ninit!(model)\nfor i in 1:1000\n    next_step!(model)\nend\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Point-Tuple{Any, Any, Any}","page":"SymbolicAWEModel","title":"KiteModels.Point","text":"Point(idx, pos_cad, type; wing_idx=1, vel_w=zeros(KVec3), transform_idx=1)\n\nConstructs a Point object. A point can be of four different DynamicsTypes:\n\nSTATIC: the point doesn't move. ddotmathbfr = mathbf0\nDYNAMIC: the point moves according to Newton's second law. ddotmathbfr = mathbfFm\nQUASI_STATIC: the acceleration is constrained to be zero, by solving a nonlinear problem. mathbfFm = mathbf0\nWING: the point has a static position in the rigid body wing frame. mathbfr_w = mathbfr_wing + mathbfR_brightarrow w mathbfr_b\n\nwhere:\n\nmathbfr is the point position vector\nmathbfF is the net force acting on the point\nm is the point mass\nmathbfr_w is the position in world frame\nmathbfr_wing is the wing center position\nmathbfR_brightarrow w is the rotation matrix from body to world frame\nmathbfr_b is the position in body frame\n\nArguments\n\nidx::Int16: Unique identifier for the point.\npos_cad::KVec3: Position of the point in the CAD frame.\ntype::DynamicsType: Dynamics type of the point (STATIC, DYNAMIC, etc.).\n\nKeyword Arguments\n\nwing_idx::Int16=1: Index of the wing this point is attached to.\nvel_w::KVec3=zeros(KVec3): Initial velocity of the point in world frame.\ntransform_idx::Int16=1: Index of the transform used for initial positioning.\n\nReturns\n\nPoint: A new Point object.\n\nExample\n\nTo create a Point:\n\n    point = Point(1, [1.0, 2.0, 3.0], DYNAMIC; wing_idx=1)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Point","page":"SymbolicAWEModel","title":"KiteModels.Point","text":"mutable struct Point\n\nA point mass.\n\nidx::Int16\ntransform_idx::Int16\nwing_idx::Int16\npos_cad::StaticArraysCore.MVector{3, Float64}\npos_b::StaticArraysCore.MVector{3, Float64}\npos_w::StaticArraysCore.MVector{3, Float64}\nvel_w::StaticArraysCore.MVector{3, Float64}\ntype::DynamicsType\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Group-Tuple{Any, Any, RamAirWing, Any, Any, Any}","page":"SymbolicAWEModel","title":"KiteModels.Group","text":"Group(idx, point_idxs, vsm_wing::RamAirWing, gamma, type, moment_frac)\n\nConstructs a Group object representing a collection of points on a kite body that share  a common twist deformation.\n\nA Group models the local deformation of a kite wing section through twist dynamics.  All points within a group undergo the same twist rotation about the chord vector.\n\nThe governing equation is:\n\nbeginaligned\ntau = underbracesum_i=1^4 r_bi times (mathbfF_bi cdot hatmathbfz)_textbridles + underbracer_a times (mathbfF_a cdot hatmathbfz)_textaero\nendaligned\n\n(Image: System Overview)\n\nwhere:\n\ntau is the total torque about the twist axis\nr_bi is the position vector of bridle point i relative to the twist center\nmathbfF_bi is the force at bridle point i\nhatmathbfz is the unit vector along the twist axis (chord direction)\nr_a is the position vector of the aerodynamic center relative to the twist center\nmathbfF_a is the aerodynamic force at the group's aerodynamic center\n\nThe group can have two DynamicsTypes:\n\nDYNAMIC: the group rotates according to Newton's second law: Iddottheta = tau\nQUASI_STATIC: the rotational acceleration is zero: tau = 0\n\nArguments\n\nidx::Int16: Unique identifier for the group\npoint_idxs::Vector{Int16}: Indices of points that move together with this group's twist\nvsm_wing::RamAirWing: Wing geometry object used to extract local chord and spanwise vectors\ngamma: Spanwise parameter (typically -1 to 1) defining the group's location along the wing\ntype::DynamicsType: Dynamics type (DYNAMIC for time-varying twist, QUASI_STATIC for equilibrium)\nmoment_frac::SimFloat: Chordwise position (0=leading edge, 1=trailing edge) about which the group rotates\n\nReturns\n\nGroup: A new Group object with twist dynamics capability\n\nExample\n\nCreate a group at mid-span with quarter of the wing moment:\n\n  group = Group(1, [1, 2, 3], vsm_wing, 0.0, DYNAMIC, 0.25)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Group","page":"SymbolicAWEModel","title":"KiteModels.Group","text":"struct Group\n\nSet of bridle lines that share the same twist angle and trailing edge angle.\n\nidx::Int16\npoint_idxs::Vector{Int16}\nle_pos::StaticArraysCore.MVector{3, Float64}\nchord::StaticArraysCore.MVector{3, Float64}\ny_airf::StaticArraysCore.MVector{3, Float64}\ntype::DynamicsType\nmoment_frac::Float64\ntwist::Float64\ntwist_vel::Float64\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Segment-Tuple{Any, Any, Any}","page":"SymbolicAWEModel","title":"KiteModels.Segment","text":"Segment(idx, point_idxs, type; l0=zero(SimFloat), compression_frac=0.1)\n\nConstructs a Segment object representing an elastic spring-damper connection between two points.\n\nThe segment follows Hooke's law with damping and aerodynamic drag:\n\nSpring-Damper Force:\n\nmathbfF_spring = leftk(l - l_0) - cdotlrighthatmathbfu\n\nAerodynamic Drag:\n\nmathbfF_drag = frac12rho C_d A mathbfv_a mathbfv_aperp\n\nTotal Force:\n\nmathbfF_total = mathbfF_spring + mathbfF_drag\n\nwhere:\n\nk = fracE pi d^24l is the axial stiffness\nl is current length, l_0 is unstretched length\nc = fracxic_spring k is damping coefficient\nhatmathbfu = fracmathbfr_2 - mathbfr_1l is unit vector along segment\ndotl = (mathbfv_1 - mathbfv_2) cdot hatmathbfu is extension rate\nmathbfv_aperp is apparent wind velocity perpendicular to segment\n\nArguments\n\nidx::Int16: Unique identifier for the segment.\npoint_idxs::Tuple{Int16, Int16}: Tuple containing the indices of the two points connected by this segment.\ntype::SegmentType: Type of the segment (POWERLINE, STEERINGLINE, BRIDLE).\n\nKeyword Arguments\n\nl0::SimFloat=zero(SimFloat): Unstretched length of the segment. Calculated from point positions if zero.\ncompression_frac::SimFloat=0.1: Compression fraction of stiffness for compression behavior.\n\nReturns\n\nSegment: A new Segment object.\n\nExample\n\nTo create a Segment:\n\n    segment = Segment(1, (1, 2), BRIDLE; l0=10.0)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Segment","page":"SymbolicAWEModel","title":"KiteModels.Segment","text":"mutable struct Segment\n\nA segment from one point index to another point index.\n\nidx::Int16\npoint_idxs::Tuple{Int16, Int16}\ntype::SegmentType\nl0::Float64\ncompression_frac::Float64\ndiameter::Float64\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Pulley-Tuple{Any, Any, Any}","page":"SymbolicAWEModel","title":"KiteModels.Pulley","text":"Pulley(idx, segment_idxs, type)\n\nConstructs a Pulley object that enforces length redistribution between two segments.\n\nThe pulley constraint maintains constant total length while allowing force transmission:\n\nConstraint Equations:\n\nl_1 + l_2 = l_total = textconstant\n\nForce Balance:\n\nF_pulley = F_1 - F_2\n\nDynamics:\n\nmddotl_1 = F_pulley = F_1 - F_2\n\nwhere:\n\nl_1 l_2 are the lengths of connected segments\nF_1 F_2 are the spring forces in the segments  \nm = rho_tether pi (d2)^2 l_total is the total mass of both segments\ndotl_1 + dotl_2 = 0 (velocity constraint)\n\nThe pulley can have two DynamicsTypes:\n\nDYNAMIC: the length redistribution follows Newton's second law: mddotl_1 = F_1 - F_2\nQUASI_STATIC: the forces are balanced instantaneously: F_1 = F_2\n\nArguments\n\nidx::Int16: Unique identifier for the pulley.\nsegment_idxs::Tuple{Int16, Int16}: Tuple containing the indices of the two segments connected by this pulley.\ntype::DynamicsType: Dynamics type of the pulley (DYNAMIC or QUASI_STATIC).\n\nReturns\n\nPulley: A new Pulley object.\n\nExample\n\nTo create a Pulley:\n\n    pulley = Pulley(1, (1, 2), DYNAMIC)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Pulley","page":"SymbolicAWEModel","title":"KiteModels.Pulley","text":"mutable struct Pulley\n\nA pulley described by two segments with the common point of the segments being the pulley.\n\nidx::Int16\nsegment_idxs::Tuple{Int16, Int16}\ntype::DynamicsType\nsum_length::Float64\nlength::Float64\nvel::Float64\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Tether","page":"SymbolicAWEModel","title":"KiteModels.Tether","text":"Tether(idx, segment_idxs)\n\nConstructs a Tether object representing a flexible line composed of multiple segments.\n\nA tether enforces a shared unstretched length constraint across all its constituent segments:\n\nLength Constraint:\n\nsum_i in textsegments l_0i = L\n\nWinch Control: The unstretched tether length is controlled by winch acceleration:\n\nddot L = alpha(v F u)\n\nwhere:\n\nL is the tether length\nl_0i is the segment unstretched length\nalpha(v F u) is the winch acceleration function depending on model type\n\nArguments\n\nidx::Int16: Unique identifier for the tether\nsegment_idxs::Vector{Int16}: Indices of segments that form this tether\n\nReturns\n\nTether: A new Tether object\n\nExample\n\nCreate a tether from segments 1, 2, and 3:\n\n    tether = Tether(1, [1, 2, 3])\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Winch-NTuple{4, Any}","page":"SymbolicAWEModel","title":"KiteModels.Winch","text":"Winch(idx, model, tether_idxs, tether_length; tether_vel=0.0)\n\nConstructs a Winch object that controls tether length through torque or speed regulation.\n\nTether Length Control:\n\nddotL = alpha(v F u)\n\nwhere:\n\nL is the tether length\nv is the reel out velocity (tether extension rate)\nF is the tether force\nu is the applied torque or speed setpoint\nalpha(v F u) is the winch acceleration function depending on model type\n\nwhere the winch acceleration function f_winch depends on the winch model type:\n\nTorque-controlled: Direct torque input with motor dynamics\nSpeed-controlled: Velocity regulation with internal control loops\n\nFor detailed mathematical models of winch dynamics, motor characteristics, and control algorithms,  see the WinchModels.jl documentation.\n\nArguments\n\nidx::Int16: Unique identifier for the winch.\nmodel::AbstractWinchModel: The winch model (TorqueControlledMachine, AsyncMachine, etc.).\ntether_idxs::Vector{Int16}: Vector containing the indices of the tethers connected to this winch.\ntether_length::SimFloat: Initial tether length.\n\nKeyword Arguments\n\ntether_vel::SimFloat=0.0: Initial tether velocity (reel-out rate).\n\nReturns\n\nWinch: A new Winch object.\n\nExample\n\nTo create a Winch:\n\n    winch = Winch(1, TorqueControlledMachine(set), [1, 2], 100.0)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Winch","page":"SymbolicAWEModel","title":"KiteModels.Winch","text":"mutable struct Winch\n\nA set of tethers or just one tether connected to a winch.\n\nidx::Int16\nmodel::AbstractWinchModel\ntether_idxs::Vector{Int16}\ntether_length::Float64\ntether_vel::Float64\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Wing-NTuple{4, Any}","page":"SymbolicAWEModel","title":"KiteModels.Wing","text":"Wing(idx, group_idxs, R_b_c, pos_cad; transform_idx=1, angular_vel=zeros(KVec3), \n     pos_w=zeros(KVec3), vel_w=zeros(KVec3))\n\nConstructs a Wing object representing a rigid body that serves as a reference frame for attached points and groups.\n\nA Wing provides a rigid body coordinate system for kite components. Points with type == WING move rigidly  with the wing body according to the wing's orientation matrix and position. Groups attached to the wing  undergo local deformation (twist) relative to the rigid wing body frame.\n\nRigid Body Dynamics: The wing follows standard rigid body equations of motion:\n\nbeginaligned\nfracdelta mathbfq_b^wdelta t = frac12 Omega(boldsymbolomega_b) mathbfq_b^w \nboldsymboltau_w = mathbfI fracdelta boldsymbolomegadelta t + boldsymbolomega_b times (mathbfIboldsymbolomega_b)\nendaligned\n\nwhere:\n\nmathbfq_b^w is the quaternion from world to body frame\nboldsymbolomega_b is the angular velocity in body frame\nOmega(boldsymbolomega_b) is the quaternion multiplication matrix\nmathbfI is the inertia tensor in body frame\nboldsymboltau_w is the total applied torque to the rigid wing body (aerodynamic + tether forces)\n\nCoordinate Transformations: Points attached to the wing transform as:\n\nmathbfr_w = mathbfr_w + mathbfR_b rightarrow w mathbfr_b\n\nwhere:\n\nmathbfr_w is the position in world frame\nmathbfr_w is the wing position in world frame\nmathbfR_b rightarrow w is the rotation from body to world frame\nmathbfr_b is the point position in body frame\n\nArguments\n\nidx::Int16: Unique identifier for the wing\ngroup_idxs::Vector{Int16}: Indices of groups attached to this wing that can deform relative to the body\nR_b_c::Matrix{SimFloat}: Rotation matrix from body frame to CAD frame (3×3 orthogonal matrix)\npos_cad::KVec3: Position of wing center of mass in CAD frame\n\nKeyword Arguments\n\ntransform_idx::Int16=1: Transform used for initial positioning and orientation\nangular_vel::KVec3=zeros(KVec3): Initial angular velocity of the wing in world frame\npos_w::KVec3=zeros(KVec3): Initial position of wing center of mass in world frame\nvel_w::KVec3=zeros(KVec3): Initial velocity of wing center of mass in world frame\n\nSpecial Properties\n\nThe wing orientation can be accessed as a quaternion:\n\n  quat = wing.orient  # Returns quaternion representation of R_b_c\n\nReturns\n\nWing: A new Wing object providing a rigid body reference frame\n\nExample\n\nCreate a wing with identity orientation and two attached groups:\n\n  R_b_c = I(3) # identity matrix\n  pos_cad = [0.0, 0.0, 0.0]\n  wing = Wing(1, [1, 2], R_b_c, pos_cad)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Wing","page":"SymbolicAWEModel","title":"KiteModels.Wing","text":"struct Wing\n\nA rigid wing body that can have multiple groups of points attached to it.\n\nFields\n\nidx::Int16: Unique identifier for the wing\ngroup_idxs::Vector{Int16}: Indices of groups attached to this wing\ntransform_idx::Int16: Transform used for initial positioning and orientation\nR_b_c::Matrix{SimFloat}: Rotation matrix from body frame to CAD frame\nangular_vel::KVec3: Angular velocity of the wing in world frame\npos_w::KVec3: Position of wing center of mass in world frame\npos_cad::KVec3: Position of wing center of mass in CAD frame\nvel_w::KVec3: Velocity of wing center of mass in world frame\n\nThe wing provides a rigid body reference frame for attached points and groups. Points with type == WING move rigidly with the wing body according to the wing's orientation matrix R_b_c and position pos_w.\n\nExtended help\n\nThe wing's orientation can be accessed as a quaternion through the orient property:\n\nwing = Wing(1, [1,2], I(3), zeros(3))\nquat = wing.orient  # Returns quaternion representation of R_b_c\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#KiteModels.Transform-NTuple{4, Any}","page":"SymbolicAWEModel","title":"KiteModels.Transform","text":"Transform(idx, elevation, azimuth, heading; \n    base_point_idx=nothing, base_pos=nothing, base_transform_idx=nothing, \n    wing_idx=nothing, rot_point_idx=nothing)\n\nConstructs a Transform object that orients system components using spherical coordinates.\n\nAll points and wings with matching transform_idx are transformed together as a rigid body:\n\nTranslation: Translate such that base is at specified base pos\nRotation 1: Rotate so target is at (elevation, azimuth) relative to base\nRotation 2: Rotate all components by heading around the base-target vector\n\nmathbfr_transformed = mathbfr_base + mathbfR_heading circ mathbfR_elevationazimuth(mathbfr - mathbfr_base)\n\nArguments\n\nidx::Int16: Unique identifier for the transform\nelevation::SimFloat: Target elevation angle from base (radians)\nazimuth::SimFloat: Target azimuth angle from base (radians)  \nheading::SimFloat: Rotation around base-target vector (radians)\n\nKeyword Arguments\n\nBase Reference (choose one):\n\nbase_pos + base_point_idx: Fixed position and reference point\nbase_transform_idx: Chain to another transform's position\n\nTarget Object (choose one):\n\nwing_idx: Wing to position at (elevation, azimuth)\nrot_point_idx: Point to position at (elevation, azimuth)\n\nReturns\n\nTransform: Transform affecting all components with matching transform_idx\n\nExamples\n\n# Position wing and all associated points at 45° elevation, 30° azimuth\ntransform = Transform(1, deg2rad(45), deg2rad(30), 0.0; \n                     base_pos=[0,0,0], base_point_idx=1, wing_idx=1)\n\n# Chain transforms for multi-kite systems\ntransform2 = Transform(2, deg2rad(30), deg2rad(45), deg2rad(10); \n                      base_transform_idx=1, wing_idx=2)\n\n\n\n\n\n","category":"method"},{"location":"ram_air_kite/#KiteModels.Transform","page":"SymbolicAWEModel","title":"KiteModels.Transform","text":"mutable struct Transform\n\nDescribes the spatial transformation (position and orientation) of system components relative to a base reference point.\n\nidx::Int16\nwing_idx::Union{Nothing, Int16}\nrot_point_idx::Union{Nothing, Int16}\nbase_point_idx::Union{Nothing, Int16}\nbase_transform_idx::Union{Nothing, Int16}\nelevation::Float64\nazimuth::Float64\nheading::Float64\nbase_pos::Union{Nothing, StaticArraysCore.MVector{3, Float64}}\n\n\n\n\n\n","category":"type"},{"location":"ram_air_kite/#Private-functions","page":"SymbolicAWEModel","title":"Private functions","text":"","category":"section"},{"location":"ram_air_kite/#KiteModels.wing_eqs!","page":"SymbolicAWEModel","title":"KiteModels.wing_eqs!","text":"wing_eqs!(s, eqs, defaults; kwargs...)\n\nGenerate the differential equations for wing dynamics including quaternion kinematics, angular velocities and accelerations, and forces/moments.\n\nArguments\n\ns::SymbolicAWEModel: The wing system state\neqs: Current system equations  \ndefaults: Default values for variables\ntether_wing_force: Forces from tethers on wing\ntether_wing_moment: Moments from tethers on wing\naero_force_b: Aerodynamic forces in body frame\naero_moment_b: Aerodynamic moments in body frame\nω_b: Angular velocity in body frame\nR_b_w: Body to world rotation matrix\nwing_pos: Kite position vector\nwing_vel: Kite velocity vector\nwing_acc: Kite acceleration vector\nstabilize: Whether in stabilize mode\n\nReturns\n\nTuple of updated equations and defaults\n\n\n\n\n\n","category":"function"},{"location":"ram_air_kite/#KiteModels.reinit!","page":"SymbolicAWEModel","title":"KiteModels.reinit!","text":"reinit!(s::SymbolicAWEModel, solver; prn=true, precompile=false) -> Nothing\n\nReinitialize an existing kite power system model with new state values. The new state is coming from the init section of the settings, stored in the struct s.set.\n\nThis function performs the following operations:\n\nIf no integrator exists yet:\nLoads a serialized ODEProblem from disk\nInitializes a new ODE integrator \nGenerates getter/setter functions for the system\nConverts initial settings to quaternion orientation\nInitializes the point mass system with new positions\nSets initial values for all state variables\nReinitializes the ODE integrator\nUpdates the linearized aerodynamic model\n\nThis is more efficient than init! as it reuses the existing model structure and only updates the state variables to match the current initial settings.\n\nArguments\n\ns::SymbolicAWEModel: The kite power system state object\nsolver: The solver to be used\nprn::Bool=true: Whether to print progress information\n\nReturns\n\nNothing\n\nThrows\n\nArgumentError: If no serialized problem exists (run init! first)\n\n\n\n\n\n","category":"function"},{"location":"ram_air_kite/#KiteModels.scalar_eqs!","page":"SymbolicAWEModel","title":"KiteModels.scalar_eqs!","text":"scalar_eqs!(s, eqs; R_b_w, wind_vec_gnd, va_wing_b, wing_pos, wing_vel, wing_acc, twist_angle, twist_ω)\n\nGenerate equations for scalar quantities like elevation, azimuth, heading and course angles.\n\n# Arguments\n- `s::SymbolicAWEModel`: The wing system state\n- `eqs`: Current system equations\n- `R_b_w`: Body to world rotation matrix\n- `wind_vec_gnd`: Ground wind vector\n- `va_wing_b`: Apparent wind velocity in body frame\n- `wing_pos`: Kite position vector\n- `wing_vel`: Kite velocity vector\n- `wing_acc`: Kite acceleration vector\n\n# Returns\n- Updated system equations including:\n- Heading angle from x-axis\n- Elevation angle\n- Azimuth angle\n- Course angle\n- Angular velocities and accelerations\n\n\n\n\n\n","category":"function"},{"location":"ram_air_kite/#KiteModels.linear_vsm_eqs!","page":"SymbolicAWEModel","title":"KiteModels.linear_vsm_eqs!","text":"linearvsmeqs!(s, eqs; aeroforceb, aeromomentb, groupaeromoment, initvab, twistangle, vawingb, ωb)\n\nGenerate linearized aerodynamic equations using the Vortex Step Method (VSM). Uses linearization around current operating point to approximate aerodynamic forces and moments. The Jacobian is computed using the VSM solver.\n\nArguments\n\ns::SymbolicAWEModel: The wing system state\neqs: Current system equations\naero_force_b: Aerodynamic forces in body frame\naero_moment_b: Aerodynamic moments in body frame \ngroup_aero_moment: Aerodynamic moments per group\ninit_va_b: Initial apparent wind velocity\ntwist_angle: Twist angles per group\nva_wing_b: Apparent wind velocity in body frame\nω_b: Angular velocity in body frame\n\nReturns\n\nUpdated system equations including linearized aerodynamics:\nForce and moment calculations\nGroup moment distributions\nJacobian matrix for state derivatives\n\n\n\n\n\n","category":"function"},{"location":"ram_air_kite/#KiteModels.force_eqs!","page":"SymbolicAWEModel","title":"KiteModels.force_eqs!","text":"force_eqs!(s, system, eqs, defaults, guesses; kwargs...)\n\nGenerate the force equations for the wing system including spring forces, drag forces, pulley dynamics and winch forces.\n\nArguments\n\ns::SymbolicAWEModel: The wing system state\nsystem::SystemStructure: The point mass representation\neqs: Current system equations\ndefaults: Default values for variables\nguesses: Initial guesses for variables\nR_b_w: Body to world rotation matrix\nwing_pos: Kite position vector\nwing_vel: Kite velocity vector  \nwind_vec_gnd: Ground wind vector\ngroup_aero_moment: Aerodynamic moments per group\ntwist_angle: Twist angles per group\nstabilize: Whether in stabilize mode\n\nReturns\n\nTuple containing:\n\nUpdated equations\nUpdated defaults\nUpdated guesses\nTether forces on wing\nTether moments on wing\n\n\n\n\n\n","category":"function"},{"location":"test_plan/#Testing-the-develop-branch-before-merging-it","page":"-","title":"Testing the develop branch before merging it","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"On  AMD Ryzen 7 7840U.","category":"page"},{"location":"test_plan/#Pass-criteria-for-the-performance:","page":"-","title":"Pass criteria for the performance:","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"First run:","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"simplifying the system      < 45s","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"Second run:","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"system initialized          < 15s\ntotal time without plotting < 35s","category":"page"},{"location":"test_plan/#Current-results-on-main,-15.06.2025:","page":"-","title":"Current results on main, 15.06.2025:","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"julia> include(\"examples/ram_air_kite.jl\")\n[ Info: Loading packages \nTime elapsed: 2.769526784 s\n[ Info: Creating wing, aero, vsm_solver, sys_struct and symbolic_awe_model:\nTime elapsed: 4.461972064 s\n[ Info: Initialized integrator in 12.45877899 seconds\n[ Info: System initialized at:\nTime elapsed: 19.64399933 s\n[ Info: Total time without plotting:\nTime elapsed: 37.744739449 s\n┌ Info: Performance:\n│   times_realtime = 8.560932325389938\n└   integrator_times_realtime = 57.896691251570246","category":"page"},{"location":"test_plan/#Destop,-25.6.2015","page":"-","title":"Destop, 25.6.2015","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"julia> include(\"examples/ram_air_kite.jl\")\n[ Info: Loading packages \nTime elapsed: 2.542575391 s\n[ Info: Creating wing, aero, vsm_solver, sys_struct and symbolic_awe_model:\nTime elapsed: 3.982282251 s\n[ Info: Initialized integrator in 11.411887056 seconds\n[ Info: System initialized at:\nTime elapsed: 17.801315579 s\n[ Info: Total time without plotting:\nTime elapsed: 34.11760255 s\n┌ Info: Performance:\n│   times_realtime = 9.499598864238592\n└   integrator_times_realtime = 53.93177410534035","category":"page"},{"location":"test_plan/#Branch-c47","page":"-","title":"Branch c47","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"julia> include(\"examples/ram_air_kite.jl\")\n[ Info: Loading packages \nTime elapsed: 2.61637947 s\n[ Info: Creating wing, aero, vsm_solver, point_system and s:\nTime elapsed: 4.084151688 s\n[ Info: Initialized integrator in 7.185354248 seconds\n[ Info: System initialized at:\nTime elapsed: 13.306661832 s\n[ Info: Total time without plotting:\nTime elapsed: 26.201612424 s\n┌ Info: Performance:\n│   times_realtime = 9.653207758331725\n└   integrator_times_realtime = 57.027712000747485","category":"page"},{"location":"test_plan/#Develop-branch","page":"-","title":"Develop branch","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"In Bash:","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"juliaup default 1.11\ngit checkout develop\ncd bin\n./update_default_manifest\n./update_xz_file\ncd ..\ngit commit -m \"Update default manifest\" Manifest-v1.11.toml.default\ngit push\njl","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"Now in Julia:","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"include(\"examples/ram_air_kite.jl\")","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"Expected output:","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"julia> include(\"examples/ram_air_kite.jl\")\n[ Info: Loading packages \nTime elapsed: 2.863292943 s\n[ Info: Creating wing, aero, vsm_solver, sys_struct and s:\nTime elapsed: 4.51880941 s\n[ Info: Initialized integrator in 6.000656365 seconds\n[ Info: System initialized at:\nTime elapsed: 13.392478822 s\n[ Info: Total time without plotting:\nTime elapsed: 30.847251362 s\n┌ Info: Performance:\n│   times_realtime = 8.426564704784319\n└   integrator_times_realtime = 62.47122497288717","category":"page"},{"location":"test_plan/#NLSolve-test","page":"-","title":"NLSolve test","text":"","category":"section"},{"location":"test_plan/","page":"-","title":"-","text":"include(\"mwes/mwe_26.jl\")\ninclude(\"mwes/mwe_26.jl\")\ninclude(\"mwes/mwe_26.jl\")","category":"page"},{"location":"test_plan/","page":"-","title":"-","text":"Each time the force, that is printed must be > 9000 N.","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"<!– SPDX-FileCopyrightText: 2025 Uwe Fechner","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"SPDX-License-Identifier: MIT –>","category":"page"},{"location":"parameters/#Configuration","page":"Parameters","title":"Configuration","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"To configure the parameters of the kite models, edit the file data/settings.yaml, or create a copy under a different name and change the name of the active configuration in the file data/system.yaml.","category":"page"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The following parameters are used by this package:","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"system:\n    log_file: \"data/log_8700W_8ms\" # filename without extension  [replay only]\n                                   #   use / as path delimiter, even on Windows \n    log_level:      2              # 0: no logging \n    time_lapse:   1.0              # relative replay speed\n    sim_time:   100.0              # simulation time             [sim only]\n    segments:       6              # number of tether segments\n    sample_freq:   20              # sample frequency in Hz\n    zoom:        0.03              # zoom factor for the system view\n    kite_scale:   3.0              # relative zoom factor for the 4 point kite\n    fixed_font: \"\"                 # name or filepath+filename of alternative fixed pitch font, e.g. Liberation Mono\n\ninitial:\n    l_tether: 150.0        # initial tether length       [m]\n    elevation: 70.8        # initial elevation angle   [deg]\n    v_reel_out: 0.0        # initial reel out speed    [m/s]\n    depower:   25.0        # initial depower settings    [%]\n\nsolver:\n    abs_tol: 0.0006        # absolute tolerance of the DAE solver [m, m/s]\n    rel_tol: 0.001         # relative tolerance of the DAE solver [-]\n    solver: \"DFBDF\"        # DAE solver, IDA or DFBDF or DImplicitEuler\n    linear_solver: \"GMRES\" # can be GMRES or LapackDense or Dense (only for IDA)\n    max_order: 4           # maximal order, usually between 3 and 5 (IDA and DFBDF)\n    max_iter:  200         # max number of iterations of the steady-state-solver\n\nsteering:\n    c0:       0.0          # steering offset   -0.0032           [-]\n    c_s:      2.59         # steering coefficient one point model; 2.59 was 0.6\n    c2_cor:   0.93         # correction factor one point model\n    k_ds:     1.5          # influence of the depower angle on the steering sensitivity\n    delta_st: 0.02         # steering increment (when pressing RIGHT)\n    max_steering: 16.834   # max. steering angle of the side planes for four point model [degrees]\n    cs_4p:  1.0            # correction factor for the steering coefficient of the four point model\n\ndepower:\n    alpha_d_max:    31.0   # max depower angle                            [deg]\n    depower_offset: 23.6   # at rel_depower=0.236 the kite is fully powered [%]\n\nkite:\n    model: \"data/kite.obj\" # 3D model of the kite\n    physical_model: \"KPS4\" # name of the kite model to use (KPS3 or KPS4)\n    version: 1             # version of the model to use\n    mass:  6.2             # kite mass incl. sensor unit [kg]\n    area: 10.18            # projected kite area         [m²]\n    rel_side_area: 30.6    # relative side area           [%]\n    height: 2.23           # height of the kite           [m]\n    alpha_cl:  [-180.0, -160.0, -90.0, -20.0, -10.0,  -5.0,  0.0, 20.0, 40.0, 90.0, 160.0, 180.0]\n    cl_list:   [   0.0,    0.5,   0.0,  0.08, 0.125,  0.15,  0.2,  1.0,  1.0,  0.0,  -0.5,   0.0]\n    alpha_cd:  [-180.0, -170.0, -140.0, -90.0, -20.0, 0.0, 20.0, 90.0, 140.0, 170.0, 180.0]\n    cd_list:   [   0.5,    0.5,    0.5,   1.0,   0.2, 0.1,  0.2,  1.0,   0.5,   0.5,   0.5]\n\nkps4:\n    width:         5.77     # width of the kite                      [m]\n    alpha_zero:    4.0      # should be 4 .. 10                [degrees]\n    alpha_ztip:   10.0      #                                  [degrees]\n    m_k:           0.2      # relative nose distance; increasing m_k increases C2 of the turn-rate law\n    rel_nose_mass: 0.47     # relative nose mass\n    rel_top_mass:  0.4      # mass of the top particle relative to the sum of top and side particles\n\nkps4_3l:\n    radius: 2.0                     # the radius of the circle shape on which the kite lines, viewed \n                                    #     from the front                                              [m]\n    bridle_center_distance: 4.0     # the distance from point the center bridle connection point of \n                                    #     the middle line to the kite                                 [m]\n    middle_length:          1.5     # the cord length of the kite in the middle                       [m]\n    tip_length:             0.62    # the cord length of the kite at the tips                         [m]\n    min_steering_line_distance: 1.0 # the distance between the left and right steering bridle         [m]\n                                    #     line connections on the kite that are closest to each other [m]\n    width_3l:               4.1     # width of the kite                                               [m]\n    aero_surfaces:          3       # the number of aerodynamic surfaces to use per mass point        [-]\n    \nbridle:\n    d_line:    2.5            # bridle line diameter                                                 [mm]\n    l_bridle: 33.4            # sum of the lengths of the bridle lines                                [m]\n    h_bridle:  4.9            # height of bridle                                                      [m]\n    rel_compr_stiffness: 0.25 # relative compression stiffness of the kite springs                    [-]\n    rel_damping: 6.0          # relative damping of the kite spring (relative to main tether)         [-]\n\nkcu:\n    kcu_model: \"KCU1\"            # name of the kite control unit model, KCU1 or KCU2\n    kcu_mass: 8.4                # mass of the kite control unit                       [kg]\n    kcu_diameter: 0.4            # diameter of the KCU for drag calculation            [m]\n    power2steer_dist: 1.3        #                                                     [m]\n    depower_drum_diameter: 0.069 #                                                     [m]\n    tape_thickness: 0.0006       #                                                     [m]\n    v_depower: 0.075             # max velocity of depowering in units per second (full range: 1 unit)\n    v_steering: 0.2              # max velocity of steering in units per second   (full range: 2 units)\n    depower_gain: 3.0            # 3.0 means: more than 33% error -> full speed\n    steering_gain: 3.0\n\ntether:\n    d_tether:  4           # tether diameter                 [mm]\n    cd_tether: 0.958       # drag coefficient of the tether\n    damping: 473.0         # unit damping coefficient        [Ns]\n    c_spring: 614600.0     # unit spring constant coefficient [N]\n    rho_tether:  724.0     # density of Dyneema           [kg/m³]\n    e_tether: 55000000000.0 # axial tensile modulus of Dyneema (M.B. Ruppert) [Pa]\n                           # SK75: 109 to 132 GPa according to datasheet\n\nwinch:\n    winch_model: \"AsyncMachine\" # or TorqueControlledMachine\n    max_force: 4000        # maximal (nominal) tether force; short overload allowed [N]\n    v_ro_max:  8.0         # maximal reel-out speed                          [m/s]\n    v_ro_min: -8.0         # minimal reel-out speed (=max reel-in speed)     [m/s]\n    drum_radius: 0.1615    # radius of the drum                              [m]\n    gear_ratio: 6.2        # gear ratio of the winch                         [-]   \n    inertia_total: 0.204   # total inertia, as seen from the motor/generator [kgm²]\n    f_coulomb: 122.0       # coulomb friction                                [N]\n    c_vf: 30.6             # coefficient for the viscous friction            [Ns/m]\n\nenvironment:\n    v_wind: 9.51             # wind speed at reference height          [m/s]\n    v_wind_ref: [9.51, 0.0]  # wind speed vector at reference height   [m/s]\n    temp_ref: 15.0           # temperature at reference height         [°C]\n    height_gnd: 0.0          # height of groundstation above see level [m]\n    h_ref:  6.0              # reference height for the wind speed     [m]\n\n    rho_0:  1.225            # air density at zero height and 15 °C    [kg/m³]\n    alpha:  0.08163          # exponent of the wind profile law\n    z0:     0.0002           # surface roughness                       [m]\n    profile_law: 3           # 1=EXP, 2=LOG, 3=EXPLOG\n    # the following parameters are for calculating the turbulent wind field using the Mann model\n    use_turbulence: 0.0      # turbulence intensity relative to Cabauw, NL\n    v_wind_gnds: [3.483, 5.324, 8.163] # wind speeds at ref height for calculating the turbulent wind field [m/s]\n    avg_height: 200.0        # average height during reel out          [m]\n    rel_turbs:   [0.342, 0.465, 0.583] # relative turbulence at the v_wind_gnds\n    i_ref: 0.14              # is the expected value of the turbulence intensity at 15 m/s.\n    v_ref: 42.9              # five times the average wind speed in m/s at hub height over the full year    [m/s]\n                             # Cabauw: 8.5863 m/s * 5.0 = 42.9 m/s\n    height_step: 2.0         # use a grid with 2m resolution in z direction                                 [m]\n    grid_step:   2.0         # grid resolution in x and y direction                                         [m]               ","category":"page"},{"location":"functions/#Introduction","page":"Functions","title":"Introduction","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Most of the functions work on a KPS3 or KPS4 object. For this, the variable s is used. Such a variable can be created with the lines:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"using KiteSimulators\nset = load_settings(\"system.yaml\")\ns = KPS3(KCU(set))","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Or, if you want to use the 4 point kite model:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"using KiteSimulators\nset = load_settings(\"system.yaml\")\ns = KPS4(KCU(set))","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Or, if you want to use the ram-air kite model:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"set = load_settings(\"system_ram.yaml\")\ns = SymbolicAWEModel(set)","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Functions with an \"!\" as last character of the function name modify one of more of their parameters, in this context mostly the variable s.","category":"page"},{"location":"functions/#Input-functions","page":"Functions","title":"Input functions","text":"","category":"section"},{"location":"functions/#KiteModels.set_depower_steering!","page":"Functions","title":"KiteModels.set_depower_steering!","text":"set_depower_steering!(s::SymbolicAWEModel, depower, steering) -> Nothing\n\nSet kite depower and steering by adjusting tether lengths. Depower controls angle of attack, steering controls left/right differential. Values are scaled by minimum chord length.\n\n\n\n\n\nset_depower_steering!(s::AKM, depower, steering)\n\nSetter for the depower and steering model inputs. \n\nParameters:\n\ndepower:   Relative depower,  must be between 0 .. 1.0\nsteering:  Relative steering, must be between -1.0 .. 1.0.  \n\nThis function sets the variables s.depower, s.steering and s.alpha_depower. \n\nIt takes the depower offset c0 and the dependency of the steering sensitivity from the depower settings into account. The raw steering value is stored in s.kcu_steering.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.set_v_wind_ground!","page":"Functions","title":"KiteModels.set_v_wind_ground!","text":"set_v_wind_ground!(s::SymbolicAWEModel, v_wind_gnd=s.set.v_wind, upwind_dir=-π/2) -> Nothing\n\nSet ground wind speed (m/s) and upwind direction (radians). Direction: 0=north, π/2=east,  π=zouth, -π/2=west (default).\n\n\n\n\n\nset_v_wind_ground!(s::AKM, height, v_wind_gnd=s.set.v_wind; upwind_dir=-pi/2)\n\nSet the vector of the wind-velocity at the height of the kite. As parameter the height, the ground wind speed [m/s] and the upwind direction [radians] are needed. Is called by the function next_step!.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Output-functions","page":"Functions","title":"Output functions","text":"","category":"section"},{"location":"functions/#KiteModels.unstretched_length","page":"Functions","title":"KiteModels.unstretched_length","text":"unstretched_length(s::AKM)\n\nGetter for the unstretched tether reel-out length (at zero force).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.tether_length","page":"Functions","title":"KiteModels.tether_length","text":"tether_length(s::AKM)\n\nCalculate and return the real, stretched tether length.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.pos_kite","page":"Functions","title":"KiteModels.pos_kite","text":"pos_kite(s::KPS4)\n\nReturn the position of the kite (top particle).\n\n\n\n\n\npos_kite(s::KPS3)\n\nReturn the position of the kite (top particle).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_aoa","page":"Functions","title":"KiteModels.calc_aoa","text":"Calculate and return the angle of attack in rad\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_height","page":"Functions","title":"KiteModels.calc_height","text":"calc_height(s::KPS4)\n\nDetermine the height of the topmost kite particle above ground.\n\n\n\n\n\ncalc_height(s::KPS3)\n\nDetermine the height of the kite particle above ground.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_elevation","page":"Functions","title":"KiteUtils.calc_elevation","text":"calc_elevation(s::AKM)\n\nDetermine the elevation angle of the kite in radian.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_azimuth","page":"Functions","title":"KiteModels.calc_azimuth","text":"calc_azimuth(s::AKM)\n\nDetermine the azimuth angle of the kite in wind reference frame in radian. Positive anti-clockwise when seen from above.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_azimuth_east","page":"Functions","title":"KiteModels.calc_azimuth_east","text":"calc_azimuth_east(s::AKM)\n\nDetermine the azimuth_east angle of the kite in radian. Positive clockwise when seen from above.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_azimuth_north","page":"Functions","title":"KiteModels.calc_azimuth_north","text":"calc_azimuth_north(s::AKM)\n\nDetermine the azimuth_north angle of the kite in radian. Positive anti-clockwise when seen from above.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_heading","page":"Functions","title":"KiteUtils.calc_heading","text":"calc_heading(s::AKM; upwind_dir_=upwind_dir(s), neg_azimuth=false, one_point=false)\n\nDetermine the heading angle of the kite in radian.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.calc_course","page":"Functions","title":"KiteUtils.calc_course","text":"calc_course(s::AKM)\n\nDetermine the course angle of the kite in radian. Undefined if the velocity of the kite is near zero.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.cl_cd","page":"Functions","title":"KiteModels.cl_cd","text":"cl_cd(s::KPS4)\n\nCalculate the lift and drag coefficients of the kite, based on the current angles of attack.\n\n\n\n\n\ncl_cd(s::KPS3)\n\nCalculate the lift and drag coefficients of the kite, based on the current angles of attack.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.winch_force","page":"Functions","title":"KiteModels.winch_force","text":"winch_force(s::KPS4)\n\nReturn the absolute value of the force at the winch as calculated during the last timestep. \n\n\n\n\n\nwinch_force(s::KPS3)\n\nReturn the absolute value of the force at the winch as calculated during the last timestep. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.spring_forces","page":"Functions","title":"KiteModels.spring_forces","text":"spring_forces(s::AKM)\n\nReturn an array of the scalar spring forces of all tether segements.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.lift_drag","page":"Functions","title":"KiteModels.lift_drag","text":"lift_drag(s::AKM)\n\nReturn a tuple of the scalar lift and drag forces. \n\nExample:  \n\nlift, drag = lift_drag(s)\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.lift_over_drag","page":"Functions","title":"KiteModels.lift_over_drag","text":"lift_over_drag(s::AKM)\n\nReturn the lift-over-drag ratio.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.v_wind_kite","page":"Functions","title":"KiteModels.v_wind_kite","text":"v_wind_kite(s::AKM)\n\nReturn the vector of the wind speed at the height of the kite.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.kite_ref_frame","page":"Functions","title":"KiteModels.kite_ref_frame","text":"kite_ref_frame(s::KPS4; one_point=false)\n\nReturns a tuple of the x, y, and z vectors of the kite reference frame.\n\n\n\n\n\nkite_ref_frame(s::KPS3)\n\nReturns a tuple of the x, y, and z vectors of the kite reference frame.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.orient_euler","page":"Functions","title":"KiteModels.orient_euler","text":"orient_euler(s::AKM)\n\nCalculate and return the orientation of the kite in euler angles (roll, pitch, yaw) as SVector.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.SysState","page":"Functions","title":"KiteUtils.SysState","text":"SysState(s::AKM, zoom=1.0)\n\nConstructor for creating a SysState object from a kite model (KPS3 or KPS4). The SysState object can be used either for logging or for displaying the system state in a viewer. Optionally the position arrays can be zoomed according to the requirements of the viewer.\n\n\n\n\n\n","category":"type"},{"location":"functions/#High-level-simulation-interface","page":"Functions","title":"High level simulation interface","text":"","category":"section"},{"location":"functions/#KiteUtils.init!","page":"Functions","title":"KiteUtils.init!","text":"init!(s::SymbolicAWEModel; solver=nothing, adaptive=true, prn=true, \n          precompile=false, remake=false, reload=false, \n          lin_outputs=Num[]) -> OrdinaryDiffEqCore.ODEIntegrator\n\nInitialize a kite power system model. \n\nIf a serialized model exists for the current configuration, it will load that model and only update the state variables. Otherwise, it will create a new model from scratch.\n\nFast path (serialized model exists):\n\nLoads existing ODEProblem from disk\nCalls reinit! to update state variables\nSets up integrator with initial settings\n\nSlow path (no serialized model):\n\nCreates symbolic MTK system with all equations\nSimplifies system equations\nCreates ODEProblem and serializes to disk\nProceeds with fast path\n\nArguments\n\ns::SymbolicAWEModel: The kite system state object  \n\nKeyword arguments\n\nsolver: Solver algorithm to use. If nothing, defaults to FBDF() or QNDF() based on s.set.solver.\nadaptive::Bool=true: Whether to use adaptive time stepping.\nstiffness_factor=nothing: ignored, for backwards compatibility\ndelta=nothing: ignored, for backwards compatibility\nprn::Bool=true: Whether to print progress information.\nprecompile::Bool=false: Whether to build problem for precompilation.\nremake::Bool=false: If true, forces the system to be rebuilt, even if a serialized model exists.\nreload::Bool=false: If true, forces the system to reload the serialized model from disk.\nlin_outputs::Vector{Num}=Num[]: List of symbolic variables for which to generate a linearization function.\n\nReturns\n\nintegrator::OrdinaryDiffEqCore.ODEIntegrator: The initialized ODE integrator.\n\n\n\n\n\ninit!(s::AKM; stiffness_factor=0.5, delta=0.0001,\n                  prn=false) -> OrdinaryDiffEqCore.ODEIntegrator\n\nInitializes the integrator of the model (KPS3 and KPS4 only).\n\nParameters:\n\ns:     an instance of an abstract kite model\nstiffness_factor: factor applied to the tether stiffness during initialization\ndelta: initial stretch of the tether during the steady state calculation\nprn: if set to true, print the detailed solver results\n\nReturns: An instance of an ODEIntegrator.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteUtils.next_step!","page":"Functions","title":"KiteUtils.next_step!","text":"next_step!(s::SymbolicAWEModel, integrator::ODEIntegrator; set_values=nothing, upwind_dir=nothing, dt=1/s.set.sample_freq, vsm_interval=1)\n\nTake a simulation step, using the internal integrator.\n\nThis function performs the following steps:\n\nOptionally update the set values (control inputs)\nOptionally update the upwind direction\nOptionally linearize the VSM (Vortex Step Method) model\nStep the ODE integrator forward by dt seconds\nCheck for a successful return code from the integrator\nIncrement the iteration counter\n\nArguments\n\ns::SymbolicAWEModel: The kite power system state object\nintegrator::ODEIntegrator: The ODE integrator to use\n\nKeyword Arguments\n\nset_values=nothing: New values for the set variables (control inputs). If nothing, the current values are used.\ndt=1/s.set.sample_freq: Time step size in seconds. Defaults to the inverse of the sample frequency.\nvsm_interval=1: Interval (in number of steps) at which to linearize the VSM model. If 0, the VSM model is not linearized.\n\nReturns\n\nNothing\n\n\n\n\n\nnext_step!(s::AKM, integrator; set_speed = nothing, set_torque=nothing, set_force=nothing, bearing = nothing\n           attractor=nothing, v_wind_gnd=s.set.v_wind, upwind_dir=-pi/2, dt=1/s.set.sample_freq)\n\nCalculates the next simulation step. Either set_speed or set_torque must be provided.\n\nParameters:\n\ns:            an instance of an abstract kite model\nintegrator:   an integrator instance as returned by the function init!\nset_speed:         set value of reel out speed in m/s or nothing\nset_torque:   set value of the torque in Nm or nothing\nset_force:    set value of the force in N or nothing (only for logging, not used otherwise)\nbearing:      set value of heading/ course in radian or nothing (only for logging, not used otherwise)\nattractor:    the attractor coordinates [azimuth, elevation] in radian or nothing (only for logging)\nv_wind_gnd: wind speed at reference height in m/s\nupwind_dir: upwind direction in radians, the direction the wind is coming from. Zero is at north;                clockwise positive. Default: -pi/2, wind from west.\ndt:           time step in seconds\n\nReturns: Nothing\n\n\n\n\n\n","category":"function"},{"location":"functions/#Low-level-simulation-interface","page":"Functions","title":"Low level simulation interface","text":"","category":"section"},{"location":"functions/#KiteModels.clear!","page":"Functions","title":"KiteModels.clear!","text":"clear!(s::KPS4)\n\nInitialize the kite power model.\n\n\n\n\n\nclear!(s::KPS3)\n\nInitialize the kite power model.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.find_steady_state!","page":"Functions","title":"KiteModels.find_steady_state!","text":"find_steady_state!(s::KPS4; prn=false, delta = 0.01, stiffness_factor=0.035, upwind_dir=-pi/2))\n\nFind an initial equilibrium, based on the initial parameters l_tether, elevation and v_reel_out.\n\n\n\n\n\nfind_steady_state!(s::KPS3; prn=false, delta = 0.0, stiffness_factor=0.035, upwind_dir=-pi/2)\n\nFind an initial equilibrium, based on the initial parameters l_tether, elevation and v_reel_out.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.residual!","page":"Functions","title":"KiteModels.residual!","text":"residual!(res, yd, y::MVector{S, SimFloat}, s::KPS4, time) where S\n\nN-point tether model, four points for the kite on top:\nInputs:\nState vector y   = pos1,  pos2, ... , posn,  vel1,  vel2, . .., veln,  length, v_reel_out\nDerivative   yd  = posd1, posd2, ..., posdn, veld1, veld2, ..., veldn, lengthd, v_reel_outd\nOutput:\nResidual     res = res1, res2 = vel1-posd1,  ..., veld1-acc1, ..., \n\nAdditional parameters:\ns: Struct with work variables, type KPS4\nS: The dimension of the state vector\n\nThe number of the point masses of the model N = S/6, the state of each point  is represented by two 3 element vectors.\n\n\n\n\n\nresidual!(res, yd, y::MVector{S, SimFloat}, s::KPS3, time) where S\n\nN-point tether model, one point kite at the top:\nInputs:\nState vector y   = pos1, pos2, ..., posn, vel1, vel2, ..., veln\nDerivative   yd  = vel1, vel2, ..., veln, acc1, acc2, ..., accn\nOutput:\nResidual     res = res1, res2 = pos1,  ..., vel1, ...\n\nAdditional parameters:\ns: Struct with work variables, type KPS3\nS: The dimension of the state vector\n\nThe number of the point masses of the model N = S/6, the state of each point  is represented by two 3 element vectors.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-functions","page":"Functions","title":"Helper functions","text":"","category":"section"},{"location":"functions/#KiteModels.copy_examples","page":"Functions","title":"KiteModels.copy_examples","text":"copy_examples()\n\nCopy all example scripts to the folder \"examples\" (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.copy_bin","page":"Functions","title":"KiteModels.copy_bin","text":"copy_bin()\n\nCopy the scripts createsysimage and run_julia to the folder \"bin\" (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_drag","page":"Functions","title":"KiteModels.calc_drag","text":"calc_drag(s::KPS3, v_segment, unit_vector, rho, last_tether_drag, v_app_perp)\n\nCalculate the drag of one tether segment, result stored in parameter last_tether_drag. Return the norm of the apparent wind velocity.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calculate_rotational_inertia!","page":"Functions","title":"KiteModels.calculate_rotational_inertia!","text":"calculate_rotational_inertia!(s::AKM, include_kcu::Bool=true, around_kcu::Bool=false)\n\nCalculate the rotational inertia (Ixx, Ixy, Ixz, Iyy, Iyz, Izz) for a kite model from settings. Modifies the kitemodel by initialising the masses.\n\nParameters:\n\nX: x-coordinates of the point masses.\nY: y-coordinates of the point masses.\nZ: z-coordinates of the point masses.\nM: masses of the point masses.\ninclude_kcu: Include the kcu in the rotational intertia calculation?\naround_kcu: Uses the kcu as the rotation point.\n\nReturns:   The tuple  Ixx, Ixy, Ixz, Iyy, Iyz, Izz where:\n\nIxx: rotational inertia around the x-axis.\nIxy: rotational inertia around the xy-plane.\nIxz: rotational inertia around the xz-plane.\nIyy: rotational inertia around the y-axis.\nIyz: rotational inertia around the yz-plane.\nIzz: rotational inertia around the z-axis.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_set_cl_cd!","page":"Functions","title":"KiteModels.calc_set_cl_cd!","text":"calc_set_cl_cd!(s::KPS3, vec_c, v_app)\n\nCalculate the lift over drag ratio as a function of the direction vector of the last tether segment, the current depower setting and the apparent wind speed. Set the calculated CL and CD values in the struct s. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_aero_forces!","page":"Functions","title":"KiteModels.calc_aero_forces!","text":"calc_aero_forces!(s::KPS4, pos, vel, rho, alpha_depower, rel_steering)\n\nCalculates the aerodynamic forces acting on the kite particles.\n\nParameters:\n\npos:              vector of the particle positions\nvel:              vector of the particle velocities\nrho:              air density [kg/m^3]\nrel_depower:      value between  0.0 and  1.0\nalpha_depower:    depower angle [degrees]\nrel_steering:     value between -1.0 and +1.0\n\nUpdates the vector s.forces of the first parameter.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_particle_forces!","page":"Functions","title":"KiteModels.calc_particle_forces!","text":"calc_particle_forces!(s::KPS4, pos1, pos2, vel1, vel2, spring, segments, d_tether, rho, i)\n\nCalculate the drag force of the tether segment, defined by the parameters pos1, pos2, vel1 and vel2 and distribute it equally on the two particles, that are attached to the segment. The result is stored in the array s.forces. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.inner_loop!","page":"Functions","title":"KiteModels.inner_loop!","text":"inner_loop!(s::KPS4, pos, vel, v_wind_gnd, segments, d_tether)\n\nCalculate the forces, acting on all particles.\n\nOutput:\n\ns.forces\ns.v_wind_tether\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.loop!","page":"Functions","title":"KiteModels.loop!","text":"loop!(s::KPS4, pos, vel, posd, veld)\n\nCalculate the vectors s.res1 and calculate s.res2 using loops that iterate over all tether segments. \n\n\n\n\n\n","category":"function"},{"location":"advanced/#Advanced-usage","page":"Advanced usage","title":"Advanced usage","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"For advanced users it is suggested to install git, bash and vscode or vscodium in addition to Julia. vscode and vscodium both have a very good plugin for Julia support, see https://www.julia-vscode.org. Installation instructions: Julia and VSCode .","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Whe using vscode, I do NOT use the Julia terminal provided by vscode, but the normal bash terminal which is also available in vscode by selecting Terminal->New Terminal From this terminal I start Julia with julia --project or a different command as explained below. This makes it easier to understand what happens and is also faster when you need to restart.","category":"page"},{"location":"advanced/#Forking-the-repository-and-creating-a-custom-system-image","page":"Advanced usage","title":"Forking the repository and creating a custom system image","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"To reduce the startup time it is suggested to use a custom system image that contains all the packages you use on a daily base in compiled form.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Go to the website https://github.com/ufechner7/KiteModels.jl and click on the Fork button at the top right.\nclone the new repository which is owned by you with a command similar to this one: git clone https://github.com/ufechner7/KiteModels.jl Your own git user name must appear in the URL, otherwise you will not be able to push your changes.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"After cloning the repo you can create a new system image:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cd KiteModels.jl\ncd bin\n./create_sys_image","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"This will take about 12 min on a  Ryzen 7950X CPU. You should now see a new file in the bin folder:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"~/repos/test/bin$ ls -lah kps*\n-rwxrwxr-x 1 ufechner ufechner 723M apr 18 18:23 kps-image-1.10-main.so","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"You can launch julia such that it makes use of this system image with the commands:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cd ..\n./bin/run_julia","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"If you now run any of the examples the time-to-first-plot (TTFP) should be less than 10s:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"julia> @time include(\"examples/simulate_simple.jl\")\nlift, drag  [N]: 597.47, 129.31\nAverage number of callbacks per time step: 114.92\n  10.009223 seconds (29.83 M allocations: 1.727 GiB, 4.31% gc time, 50.81% compilation time)\n\njulia> ","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"A second run of this command needs about 3.7 s which means the startup time (load and compilation time of the package and the libraries) has been reduced to about 6.3s.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Without a system image the first time execution of the script \"simulate_simple.jl\" on the same computer is about 22.5 seconds while the time for the second execution is the same (3.9s). So now about 15s of time are saved after each restart.","category":"page"},{"location":"advanced/#Hints-for-Developers","page":"Advanced usage","title":"Hints for Developers","text":"","category":"section"},{"location":"advanced/#Coding-style","page":"Advanced usage","title":"Coding style","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"add the packages TestEnv and Revise to your global environment, not to any project\navoid hard-coded numeric values like 9.81 in the code, instead define a global constant G_EARTH or read this value from a configuration file\nstick to a line length limit of 120 characters\ntry to avoid dot operators unless you have to. ","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Bad: norm1        .~ norm(segment) Good: norm1        ~ norm(segment)","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"if you need to refer to the settings you can use se() which will load the settings of the active project. To define the active project use a line like set = se(\"system_3l.yaml\") at the beginning of your program.\nuse the \\cdot operator for the dot product for improved readability\nuse a space after a comma, e.g. force_eqs[j, i]\nenclose operators like + and * in single spaces, like 0.5 * (s.pos[s.i_C] + s.pos[s.i_D]);   exception: mass_tether_particle[i-1]\ntry to align the equation signs for improved readability like this:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"    tether_rhs        = [force_eqs[j, i].rhs for j in 1:3]\n    kite_rhs          = [force_eqs[j, i+3].rhs for j in 1:3]\n    f_xy              = dot(tether_rhs, e_z) * e_z","category":"page"},{"location":"advanced/#Outlook","page":"Advanced usage","title":"Outlook","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The next steps:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"finish and merge the KPS5 kite power system model, based on ModellingToolkit\nuse VortexStepMethod.jl for KPS5 \nadd a rigid wing model\nadd a Matlab/ Simulink wrapper similar to the Python wrapper pykitemodels","category":"page"},{"location":"examples_4p/#Examples-for-using-the-four-point-kite-model","page":"Examples 4p","title":"Examples for using the four point kite model","text":"","category":"section"},{"location":"examples_4p/#Create-a-test-project","page":"Examples 4p","title":"Create a test project","text":"","category":"section"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"mkdir test\ncd test\njulia --project=.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Don't forget to type the dot at the end of the last line. With the last command, we told Julia to create a new project in the current directory.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"You can copy the examples to your project with:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"using KiteModels\nKiteModels.install_examples()","category":"page"},{"location":"examples_4p/#Plotting-the-initial-state","page":"Examples 4p","title":"Plotting the initial state","text":"","category":"section"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"First, an instance of the model of the kite control unit (KCU) is created which is needed by the Kite Power System model KPS3. Then we create a kps instance, passing the kcu model as parameter. We need to declare these variables as const to achieve a decent performance.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"using KiteModels\nkcu::KCU = KCU(se())\nkps = KPS4(kcu)","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Then we call the function find_steady_state which uses a non-linear solver to find the solution for a given elevation angle, reel-out speed and wind speed. ","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"find_steady_state!(kps, prn=true)","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Finding the steady state of the 4-point model is difficult and it only works when we artificially reduce the stiffness by a factor of 0.035. In the function init! this factor is slowly increased to 1.0.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"To plot the result in 2D we extract the vectors of the x and z coordinates of the tether particles with a for loop:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"x = Float64[] \nz = Float64[]\nfor i in 1:length(kps.pos)\n     push!(x, kps.pos[i][1])\n     push!(z, kps.pos[i][3])\nend","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"And finally, we plot the position of the particles in the x-z plane. When you type using ControlPlots you will be asked if you want to install the ControlPlots package. Just press \\<ENTER\\> and it gets installed.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"using ControlPlots\nplot(x,z, xlabel=\"x [m]\", ylabel=\"z [m]\", scatter=true)","category":"page"},{"location":"examples_4p/#Initial-State","page":"Examples 4p","title":"Initial State","text":"","category":"section"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"(Image: Initial State)","category":"page"},{"location":"examples_4p/#Print-other-model-outputs","page":"Examples 4p","title":"Print other model outputs","text":"","category":"section"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Print the vector of the positions of the particles:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"julia> kps.pos\n11-element StaticArrays.SVector{11, StaticArrays.MVector{3, Float64}} with indices SOneTo(11):\n [0.0, 0.0, 0.0]\n [9.179237622840555, 0.0, 23.842235605018427]\n [18.04995989861643, 0.0, 47.800963572571995]\n [26.562156210544767, 0.0, 71.88939923189402]\n [34.68610302268368, 0.0, 96.11152960655927]\n [42.39897331360162, 0.0, 120.4676716318371]\n [49.681585065247006, 0.0, 144.95590371155842]\n [50.19560621291923, 0.0, 150.01396766608025]\n [51.447158096922415, 0.0, 152.22064860101747]\n [51.269841233250816, 2.823293379900761, 149.7849943282592]\n [51.269841233250816, -2.823293379900761, 149.7849943282592]\n","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Print the unstretched and stretched tether length and the height of the kite:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"julia> unstretched_length(kps)\n150.0\n\njulia> tether_length(kps)\n152.24467154884996\n\njulia> calc_height(kps)\n152.18828499538841","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Because of the the stiffness_factor of 0.035 we have a longer tether-length then when using the 1 point kite model. ","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Print the force at the winch (groundstation, in Newton) and at each tether segment:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"julia> winch_force(kps)\n321.91887139903304\n\njulia> spring_forces(kps)\n15-element Vector{Float64}:\n 321.90741146969305\n 321.90394881639793\n 321.90117644298266\n 321.8991487686265\n 321.89747937647513\n 321.8960226182887\n  48.63781489453856\n -44.13400039648584\n -38.834017666472626\n 128.20126839800218\n 149.28336751268995\n 149.28336751268995\n 128.20126839800218\n -44.13400039648584\n  51.39155976906608","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Some of the forces are negative which means the segments are getting compressed. This is acceptable for the kite itself (not for the tether).","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Print the lift and drag forces of the kite (in Newton) and the lift-over-drag ratio:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"julia> lift, drag = lift_drag(kps)\n(402.1444777567862, 117.73620926656395)\n\njulia> lift_over_drag(kps)\n3.4156397616497047","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"Print the wind speed vector at the kite:","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"julia> v_wind_kite(kps)\n3-element StaticArrays.MVector{3, Float64} with indices SOneTo(3):\n 12.603056847417106\n  0.0\n  0.0","category":"page"},{"location":"examples_4p/#Example-of-reeling-out-the-tether","page":"Examples 4p","title":"Example of reeling out the tether","text":"","category":"section"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"include(\"examples/reel_out_4p.jl\")","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"(Image: Reel out 4p model)","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"In this example, we first keep the tether length constant and at 15 s start to reel out the winch with an acceleration of 0.1 m/s². At a set speed below 2.2 m/s the brake of the winch is active, therefore the \"jump\" in the v_reelout at  the beginning of the reel-out phase.","category":"page"},{"location":"examples_4p/","page":"Examples 4p","title":"Examples 4p","text":"It is not a real jump, but a high acceleration compared to the acceleration afterward.","category":"page"},{"location":"examples_ram_air/#Examples-for-using-the-ram-air-kite-model","page":"Examples SymbolicAWEModel","title":"Examples for using the ram air kite model","text":"","category":"section"},{"location":"examples_ram_air/#Create-a-test-project","page":"Examples SymbolicAWEModel","title":"Create a test project","text":"","category":"section"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"mkdir test\ncd test\njulia --project=.","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"Don't forget to type the dot at the end of the last line. With the last command, we told Julia to create a new project in the current directory.","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"You can copy the examples to your project with:","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"using KiteModels\nKiteModels.install_examples()","category":"page"},{"location":"examples_ram_air/#Running-the-first-example","page":"Examples SymbolicAWEModel","title":"Running the first example","text":"","category":"section"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"SIMPLE=false; include(\"examples/ram_air_kite.jl\")","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"Expected output for first run:","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"[ Info: Loading packages \nTime elapsed: 7.483472342 s\n[ Info: Creating wing, aero, vsm_solver, sys_struct and s:\nTime elapsed: 15.341197455 s\n[ Info: Creating ODESystem\n  4.316010 seconds (8.72 M allocations: 222.606 MiB, 1.42% gc time, 25.46% compilation time: 14% of which was recompilation)\n[ Info: Simplifying the system\n 38.520311 seconds (335.98 M allocations: 11.256 GiB, 3.30% gc time, 26.34% compilation time: 29% of which was recompilation)\n[ Info: Creating ODEProblem\n 79.285815 seconds (668.64 M allocations: 22.706 GiB, 3.52% gc time, 19.17% compilation time: 19% of which was recompilation)\n[ Info: Initialized integrator in 20.055285573 seconds\n[ Info: System initialized at:\nTime elapsed: 184.100123328 s\n[ Info: Total time without plotting:\nTime elapsed: 201.450775931 s\n┌ Info: Performance:\n│   times_realtime = 5.425567300328113\n└   integrator_times_realtime = 17.86788617896347","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"The second time it runs much faster, because the simplified ODE system is cached in the prob_dynamic_1.11_3_seg.bin file in the data folder:","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"[ Info: Loading packages \nTime elapsed: 7.396961284 s\n[ Info: Creating wing, aero, vsm_solver, sys_struct and s:\nTime elapsed: 15.387790726 s\n[ Info: Initialized integrator in 29.545349428 seconds\n[ Info: System initialized at:\nTime elapsed: 57.134361795 s\n[ Info: Total time without plotting:\nTime elapsed: 75.475794933 s\n┌ Info: Performance:\n│   times_realtime = 5.038873691119553\n└   integrator_times_realtime = 16.40954043592023","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"You can save another 45s when checking out the code with git, create a system image and run the example from the checked out repository.","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"In this example, the kite is first parked, and then a sinus-shaped steering input is applied such that is dancing in the sky.","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"(Image: Oscillating steering input response)","category":"page"},{"location":"examples_ram_air/#Running-the-second-example","page":"Examples SymbolicAWEModel","title":"Running the second example","text":"","category":"section"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"SIMPLE=true; include(\"examples/ram_air_kite.jl\")","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"The simple model has a very simple bridle system without pulleys and with less attachment points on the wing.  While the default model has a speed system with pulleys and more attachment points on the wing.","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"(Image: Oscillating steering input response, simple system)","category":"page"},{"location":"examples_ram_air/#Linearization","page":"Examples SymbolicAWEModel","title":"Linearization","text":"","category":"section"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"The following example creates a nonlinear system model, finds a steady-state operating point, linearizes the model  around this operating point and compares the simulation results of the non-linear and linearized system:","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"include(\"examples/lin_ram_model.jl\")","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"See: lin_ram_model.jl","category":"page"},{"location":"examples_ram_air/#How-to-create-a-SymbolicAWEModel","page":"Examples SymbolicAWEModel","title":"How to create a SymbolicAWEModel","text":"","category":"section"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"The following code is a minimal example that shows how to create a ram air kite struct:","category":"page"},{"location":"examples_ram_air/","page":"Examples SymbolicAWEModel","title":"Examples SymbolicAWEModel","text":"using KiteModels\n\n# Initialize model\nset = load_settings(\"system_ram.yaml\")\n\nsam = SymbolicAWEModel(set)","category":"page"},{"location":"tutorial_system_structure/#Custom-SystemStructure-and-SymbolicAWESystem","page":"SystemStructure for custom models","title":"Custom SystemStructure and SymbolicAWESystem","text":"","category":"section"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"A custom SystemStructure can be used to create models of kite power systems of almost any configuration.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"custom amount of tethers\ncustom bridle configurations\nquasi-static or dynamic point masses\ndifferent amounts of stiffness, damping and diameter on different tether segments","category":"page"},{"location":"tutorial_system_structure/#Precondition","page":"SystemStructure for custom models","title":"Precondition","text":"","category":"section"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"First, following the Quickstart section up to the installation of the examples. Make sure that at least KiteModels version 0.8 is installed by typing using Pkg; Pkg.status(). To start Julia, either use julia --project, or ./bin/run_julia.","category":"page"},{"location":"tutorial_system_structure/#Creating-a-simple-tether","page":"SystemStructure for custom models","title":"Creating a simple tether","text":"","category":"section"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"We start by loading the necessary packages and defining settings and parameters.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"using KiteModels, VortexStepMethod, ControlPlots\n\nset = se(\"system_ram.yaml\")\nset.segments = 20\ndynamics_type = DYNAMIC","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"Then, we define vectors of the system structure types we are going to use. For this simple example we only need points and segments.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"points = Point[]\nsegments = Segment[]\n\npoints = push!(points, Point(1, zeros(3), STATIC; wing_idx=0))","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"The first point we add is a static point. There are four different DynamicsTypes to choose from: STATIC, QUASI_STATIC, DYNAMIC and WING. STATIC just means that the point doesn't move. DYNAMIC is a point modeled with acceleration, while QUASI_STATIC constrains this acceleration to be zero at all times. A WING point is connected to a wing body.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"Now we can add DYNAMIC points and connect them to each other with segments. BRIDLE segments don't need to have a tether, because they have a constant unstretched length.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"segment_idxs = Int[]\nfor i in 1:set.segments\n    global points, segments\n    point_idx = i+1\n    pos = [0.0, 0.0, i * set.l_tether / set.segments]\n    push!(points, Point(point_idx, pos, dynamics_type; wing_idx=0))\n    segment_idx = i\n    push!(segments, Segment(segment_idx, (point_idx-1, point_idx), BRIDLE))\n    push!(segment_idxs, segment_idx)\nend","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"In order to describe the initial orientation of the structure, we define a Transform(idx, elevation, azimuth, heading) with an elevation (-80 degrees), azimuth and heading, and a base position [0.0, 0.0, 50.0].","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"transforms = [Transform(1, deg2rad(-80), 0.0, 0.0; \n              base_pos = [0.0, 0.0, 50.0], base_point_idx=points[1].idx,\n              rot_point_idx=points[end].idx)]","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"From the points, segments and transform we create a SystemStructure(name, set), which can be plotted in 2d to quickly investigate if the model is correct.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"sys_struct = SystemStructure(\"tether\", set; points, segments, transforms)\nplot(sys_struct, 0.0)","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"(Image: SystemStructure visualization)","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"If the system looks good, we can easily model it, by first creating a SymbolicAWEModel, initializing it and stepping through time.","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"sam = SymbolicAWEModel(set, sys_struct)\n\ninit!(sam; remake=false)\nfor i in 1:80\n    plot(sam, i/set.sample_freq)\n    next_step!(sam)\nend","category":"page"},{"location":"tutorial_system_structure/","page":"SystemStructure for custom models","title":"SystemStructure for custom models","text":"(Image: Tether during simulation)","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/#Installation-of-Julia","page":"Quickstart","title":"Installation of Julia","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"For a quick test of this program, it is NOT needed to install VSCode, git or bash. Just installing Julia is sufficient, and that can be done in a few minutes. ","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"<details>\n  <summary>Windows</summary>","category":"page"},{"location":"quickstart/#Windows","page":"Quickstart","title":"Windows","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Please download and install Julia using juliaup. Launch the Command Prompt app and type:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"winget install julia -s msstore\njuliaup add 1.10\njuliaup update","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"If that doesn't work, download https://install.julialang.org/Julia.appinstaller and double-click on the downloaded file to install it.","category":"page"},{"location":"quickstart/#Optional","page":"Quickstart","title":"Optional","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"It is suggested to install Windows Terminal . Copy and paste works better, unicode works much better and you can use it with bash or Command Prompt, whatever you prefer. It is suggested to set one of these two as default using the Settings menu of Windows Terminal.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"</details>","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"<details>\n  <summary>Linux</summary>","category":"page"},{"location":"quickstart/#Linux","page":"Quickstart","title":"Linux","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Copy and past the following line to install julia:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"curl -fsSL https://install.julialang.org | sh","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Restart your terminal, and then execute:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"juliaup add 1.10\njuliaup update","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"It is suggested to add the following line to your .bashrc file:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"alias jl='./bin/run_julia'","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"This makes it possible to run Julia with the shortcut jl later.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"</details>","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"<details>\n  <summary>Mac</summary>","category":"page"},{"location":"quickstart/#Mac","page":"Quickstart","title":"Mac","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Please download and install juliaup as explained at https://github.com/JuliaLang/juliaup .","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Restart your terminal, and then execute:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"juliaup add 1.10\njuliaup update","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"</details>","category":"page"},{"location":"quickstart/#Create-a-test-project","page":"Quickstart","title":"Create a test project","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Launch a command prompt and create a folder with the name \"test\":","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"With the last command, we told Julia to create a new project in the current directory.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can copy the examples to your project with:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using KiteModels\nKiteModels.install_examples()","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Your folder structure should now look like this:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"shell> tree -d\n├── data\n├── examples\n└── test\n    ├── data\n    └── examples\n\n5 directories","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can access the operating system command line by typing the character \";\", you then get a \"shell\" prompt and can enter operating system commands. To leave shell mode, type <BACKSLASH>.  On windows you need to type tree /f instead of tree to see the files.","category":"page"},{"location":"quickstart/#Executing-the-first-example","page":"Quickstart","title":"Executing the first example","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"From the Julia prompt you can use the command \"include\" to execute a script:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"include(\"examples/simulate_simple.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"On Windows you need to type \"\\\\\" instead of \"/\":","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"include(\"examples\\\\simulate_simple.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You will see the 4-point kite fly for 30s. If you want to change the settings of the simulation, open the file simulate_simple.jl in your favorite text editor, modify the settings at the beginning of the file and execute the include command again. You can use the <TAB> key for autocompletion, for example include(\"ex<TAB> completes to include(\"examples\\ which can save a lot of typing. If you type <TAB> again you get a list of files to choose from.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Try out changing the following default settings:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"dt = 0.05\nSTEPS = 600\nPLOT = true\nFRONT_VIEW = false\nZOOM = true\nPRINT = false\nSTATISTIC = false","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Now you can quit Julia with the command exit(). If you want to launch Julia again, be sure to be in the correct folder and then type julia --project. Without the parameter --project it will not load your project settings.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The first run of the script will be slow because Julia must compile the code. The second and any further run is very fast, but only as long as you do not leave your Julia session.","category":"page"},{"location":"quickstart/#Comparing-the-one-point-and-the-four-point-kite-model","page":"Quickstart","title":"Comparing the one-point and the four-point kite model","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Start Julia in the project folder you created before:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"cd test\njulia --project","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"and then execute the command","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using KiteModels\ninclude(\"examples/compare_kps3_kps4.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Use the command include(\"examples\\\\compare_kps3_kps4.jl\") on Windows.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The last view of the animation should look like this:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"(Image: Initial State)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can save what you see with the command savefig(\"kite.png\").","category":"page"},{"location":"quickstart/#Exercise","page":"Quickstart","title":"Exercise","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Modify the variable ALPHA_ZERO in line 11 of the script until the lift force of the 1 point model and the 4 point model match.","category":"page"},{"location":"quickstart/#Questions?","page":"Quickstart","title":"Questions?","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"If you have any questions, please ask in the Julia Discourse forum in the section modelling and simulation , or in in the section First steps . The Julia community is very friendly and responsive.","category":"page"},{"location":"examples/#Examples-for-using-the-one-point-kite-model","page":"Examples 1p","title":"Examples for using the one point kite model","text":"","category":"section"},{"location":"examples/#Create-a-test-project","page":"Examples 1p","title":"Create a test project","text":"","category":"section"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"With the last command, we told Julia to create a new project in the current directory.","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Then add KiteModels from  Julia's package manager, by typing:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"using Pkg\npkg\"add KiteModels\"","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"You can copy the examples to your project with:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"using KiteModels\nKiteModels.install_examples()","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"This also adds the extra packages, needed for the examples to the project. Furthermore, it creates a folder data with some example input files. You can now run the examples with the command:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"include(\"examples/menu.jl\")","category":"page"},{"location":"examples/#Plotting-the-initial-state","page":"Examples 1p","title":"Plotting the initial state","text":"","category":"section"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"First, an instance of the model of the kite control unit (KCU) is created which is needed by the Kite Power System model KPS3. Then we create a kps instance, passing the kcu model as parameter. We need to declare the type these variables to achieve a decent performance.","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"using KiteModels\nkcu::KCU = KCU(se())\nkps::KPS3 = KPS3(kcu)","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Then we call the function find_steady_state which uses a non-linear solver to find the solution for a given elevation angle, reel-out speed and wind speed. ","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"find_steady_state!(kps, prn=true)","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"To plot the result in 2D we extract the vectors of the x and z coordinates of the tether particles with a for loop:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"x = Float64[] \nz = Float64[]\nfor i in 1:length(kps.pos)\n     push!(x, kps.pos[i][1])\n     push!(z, kps.pos[i][3])\nend","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"And finally, we plot the position of the particles in the x-z plane. When you type using ControlPlots you will be asked if you want to install the ControlPlots package. Just press \\<ENTER\\> and it gets installed.","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"using ControlPlots\nplot(x,z, xlabel=\"x [m]\", ylabel=\"z [m]\", scatter=true)","category":"page"},{"location":"examples/#Inital-State","page":"Examples 1p","title":"Inital State","text":"","category":"section"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"(Image: Initial State)","category":"page"},{"location":"examples/#Print-other-model-outputs","page":"Examples 1p","title":"Print other model outputs","text":"","category":"section"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Print the vector of the positions of the particles:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"julia> kps.pos\n7-element StaticArrays.SVector{7, StaticArrays.MVector{3, Float64}} with indices SOneTo(7):\n [0.0, 0.0, 0.0]\n [26.95751778658999, 0.0, 59.59749511924355]\n [51.97088814144287, 0.0, 120.03746888266994]\n [75.01423773175357, 0.0, 181.25637381120865]\n [96.06809940556136, 0.0, 243.18841293054678]\n [115.11959241520753, 0.0, 305.7661763854397]\n [132.79571663189674, 0.0, 368.74701279158705]\n","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Print the unstretched and stretched tether length and the height of the kite:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"julia> unstretched_length(kps)\n150.0\n\njulia> tether_length(kps)\n150.1461801769623\n\njulia> calc_height(kps)\n142.78102261557189","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Print the force at the winch (groundstation, in Newton) and at each tether segment:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"julia> winch_force(kps)\n592.5649922210812\n\njulia> spring_forces(kps)\n6-element Vector{Float64}:\n 592.5534481632459\n 595.0953689567787\n 597.6497034999358\n 600.215921248686\n 602.793488771366\n 605.3855398009119","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"The force increases when going upwards because the kite not only experiences the winch force but in addition the weight of the tether.","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Print the lift and drag forces of the kite (in Newton) and the lift-over-drag ratio:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"julia> lift, drag = lift_drag(kps)\n(730.5877517655691, 157.36420900755007)\n\njulia> lift_over_drag(kps)\n4.64265512706588","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"Print the wind speed vector at the kite:","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"julia> v_wind_kite(kps)\n3-element StaticArrays.MVector{3, Float64} with indices SOneTo(3):\n 12.54966091924401\n  0.0\n  0.0","category":"page"},{"location":"examples/#Example-of-reeling-out-the-tether","page":"Examples 1p","title":"Example of reeling out the tether","text":"","category":"section"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"include(\"examples/reel_out_1p.jl\")","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"(Image: Reel out 1p model)","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"In this example, we first keep the tether length constant and at 15 s start to reel out the winch with an acceleration of 0.1 m/s². At a set speed below 2.2 m/s the brake of the winch is active, therefore the \"jump\" in the v_reelout at the beginning of the reel-out phase.","category":"page"},{"location":"examples/","page":"Examples 1p","title":"Examples 1p","text":"It is not a real jump, but a high acceleration compared to the acceleration afterward.","category":"page"},{"location":"#KiteModels","page":"Home","title":"KiteModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the package KiteModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The models have the following subcomponents, implemented in separate packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"AtmosphericModel from AtmosphericModels\nWinchModel from WinchModels \nKitePodModel from  KitePodModels\nThe aerodynamic forces and moments of some of the models are calculated using the package VortexStepMethod","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is part of Julia Kite Power Tools, which consist of the following packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Julia Kite Power Tools)","category":"page"},{"location":"#What-to-install","page":"Home","title":"What to install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to run simulations and see the results in 3D, please install the meta package  KiteSimulators which contains all other packages. If you are not interested in 3D visualization or control you can just install this package. When you have installed the package KiteSimulators, use the command using KiteSimulators instead of using KiteModels when this is mentioned in the documentation.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install Julia 1.11, if you haven't already. Julia 1.10 is still supported, but the performance is worse. On Linux, make sure that Python3 and Matplotlib are installed:","category":"page"},{"location":"","page":"Home","title":"Home","text":"sudo apt install python3-matplotlib","category":"page"},{"location":"","page":"Home","title":"Home","text":"Make sure that ControlPlots.jl works as explained here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Before installing this software it is suggested to create a new project, for example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then add KiteModels from  Julia's package manager, by typing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add KiteModels\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt. You can run the unit tests with the command (careful, can take 60 min):","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg\"test KiteModels\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can copy the examples to your project with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using KiteModels\nKiteModels.install_examples()","category":"page"},{"location":"","page":"Home","title":"Home","text":"This also adds the extra packages, needed for the examples to the project. Furthermore, it creates a folder data with some example input files. You can now run the examples with the command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/menu.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also run the ram-air-kite example like this:","category":"page"},{"location":"","page":"Home","title":"Home","text":"include(\"examples/ram_air_kite.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This might take two minutes. To speed up the model initialization, you can create a system image:","category":"page"},{"location":"","page":"Home","title":"Home","text":"cd bin\n./create_sys_image","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you now launch Julia with ./bin/run_julia and then run the above example again, it should be about three times faster.","category":"page"},{"location":"#News","page":"Home","title":"News","text":"","category":"section"},{"location":"#Work-in-progress","page":"Home","title":"Work in progress","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a new 5-point model based on ModelingToolkit (MTK) is in development;   this will allow to create linearized models around any operation point and to do analysis in the frequency domain.","category":"page"},{"location":"#April-2025","page":"Home","title":"April 2025","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a new model SymbolicAWEModel was contributed, based on the package VortexStepMethod","category":"page"},{"location":"#November-2024","page":"Home","title":"November 2024","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"the four point kite model KPS4 was extended to include aerodynamic damping of pitch oscillations; for this purpose, the parameters cmq and cord_length must be defined in settings.yaml\nthe four point kite model KPS4 was extended to include the impact of the deformation of the kite on the turn rate; for this, the parameter smc must be defined in settings.yaml","category":"page"},{"location":"#October-2024","page":"Home","title":"October 2024","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"the orientation is now represented with respect to the NED reference frame\nazimuth is now calculated in wind reference frame. This allows it to handle changes of the wind direction during flight correctly.\nmany unit tests added by a new contributor\nmany tests for model verification added; they can be accessed using the menu2.jl script\nthe documentation was improved","category":"page"},{"location":"#Provides","page":"Home","title":"Provides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The types KPS3, KPS4 and SymbolicAWEModel, representing the one point, the four point kite model and the ram air kite model, together with the high level simulation interface consisting of the functions init! and next_step!. Other kite models can be added inside or outside of this package by implementing the non-generic methods required for an AbstractKiteModel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional functions to provide inputs and outputs of the model on each time step. In particular the constructor SysState can be called once per time step to create a SysState struct for logging or for displaying the state in a viewer. For the KPS3 and KPS4 model, once per time step the residual! function is called as many times as needed to find the solution at the end of the time step. The formulas are based on basic physics and aerodynamics and can be quite simple because a differential algebraic notation is used.","category":"page"},{"location":"#One-point-model","page":"Home","title":"One point model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This model assumes the kite to be a point mass. This is sufficient to model the aerodynamic forces, but the dynamic concerning the turning action of the kite is not realistic. When combined with a controller for the turn rate it can be used to simulate a pumping kite power system with medium accuracy.","category":"page"},{"location":"#Four-point-model","page":"Home","title":"Four point model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This model assumes the kite to consist of four-point masses with aerodynamic forces acting on points B, C and D. It reacts much more realistically than the one-point model because it has rotational inertia in every axis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Four point kite power system model)","category":"page"},{"location":"#Ram-air-kite-model","page":"Home","title":"Ram air kite model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This model represents the kite as a deforming rigid body, with orientation governed by quaternion dynamics. Aerodynamics are computed using the Vortex Step Method. The kite is controlled from the ground via four tethers.","category":"page"},{"location":"#Tether","page":"Home","title":"Tether","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The tether is modeled as point masses, connected by spring-damper elements. Aerodynamic drag is modeled realistically. When reeling out or in the unstreched length of the spring-damper elements is varied. This does not translate into physics directly, but it avoids adding point masses at run-time, which would be even worse because it would introduce discontinuities. When using Dyneema or similar high-strength materials for the tether the resulting system is very stiff which is a challenge for the solver.","category":"page"},{"location":"#Reference-frames-and-control-inputs","page":"Home","title":"Reference frames and control inputs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a positive set_torque will accelerate the reel-out, a negative set_torque counteract the pulling force of the kite. The unit is [N/m] as seen at the motor/generator axis.\nthe depower settings are dimensionless and can be between zero and one. A value equal to mathrmdepower_zero100 from the settings.yaml file means that the kite is fully powered. \nthe heading angle, the direction the nose of the kite is pointing to is positive in clockwise direction when seen from above.\nthe steering input, dimensionless and in the range of -1.0 .. 1.0. A positive steering input causes a positive turn rate (derivative of the heading).","category":"page"},{"location":"","page":"Home","title":"Home","text":"A definition of the reference frames can be found here .","category":"page"},{"location":"#Further-reading","page":"Home","title":"Further reading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The one point and four point kite models are described in detail in Dynamic Model of a Pumping Kite Power System.","category":"page"},{"location":"#See-also","page":"Home","title":"See also","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Research Fechner for the scientic background of this code\nThe meta-package  KiteSimulators\nthe package KiteUtils\nthe packages WinchModels and KitePodModels and AtmosphericModels\nthe packages KiteControllers and KiteViewers\nthe VortexStepMethod","category":"page"},{"location":"","page":"Home","title":"Home","text":"Authors: Uwe Fechner (uwe.fechner.msc@gmail.com), Bart van de Lint (bart@vandelint.net)","category":"page"},{"location":"types/#Exported-Types","page":"Types","title":"Exported Types","text":"","category":"section"},{"location":"types/#Basic-types","page":"Types","title":"Basic types","text":"","category":"section"},{"location":"types/#KiteModels.SimFloat","page":"Types","title":"KiteModels.SimFloat","text":"const SimFloat = Float64\n\nThis type is used for all real variables, used in the Simulation. Possible alternatives: Float32, Double64, Dual Other types than Float64 or Float32 do require support of Julia types by the solver. \n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.KVec3","page":"Types","title":"KiteModels.KVec3","text":"const KVec3    = MVector{3, SimFloat}\n\nBasic 3-dimensional vector, stack allocated, mutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.SVec3","page":"Types","title":"KiteModels.SVec3","text":"const SVec3    = SVector{3, SimFloat}\n\nBasic 3-dimensional vector, stack allocated, immutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.AKM","page":"Types","title":"KiteModels.AKM","text":"const AKM = AbstractKiteModel\n\nShort alias for the AbstractKiteModel. \n\n\n\n\n\n","category":"type"},{"location":"types/#Struct-KPS3-and-KPS4-and-SymbolicAWEModel","page":"Types","title":"Struct KPS3 and KPS4 and SymbolicAWEModel","text":"","category":"section"},{"location":"types/#KiteModels.KPS3","page":"Types","title":"KiteModels.KPS3","text":"mutable struct KPS3{S, T, P} <: AbstractKiteModel\n\nState of the kite power system. Parameters:\n\nS: Scalar type, e.g. SimFloat In the documentation mentioned as Any, but when used in this module it is always SimFloat and not Any.\nT: Vector type, e.g. MVector{3, SimFloat}\nP: number of points of the system, segments+1\n\nNormally a user of this package will not have to access any of the members of this type directly, use the input and output functions instead.\n\nset::Settings: Reference to the settings struct\nkcu::KCU: Reference to the KCU model (Kite Control Unit as implemented in the package KitePodModels\nam::AtmosphericModel: Reference to the atmospheric model as implemented in the package AtmosphericModels Default: AtmosphericModel(set)\nwm::Union{Nothing, AbstractWinchModel}: Reference to winch model as implemented in the package WinchModels Default: nothing\nintegrator::Union{Nothing, OrdinaryDiffEqCore.ODEIntegrator, Sundials.IDAIntegrator}: Integrator, storing the current state Default: nothing\niter::Int64: Iterations, number of calls to the function residual! Default: 0\ncalc_cl::Dierckx.Spline1D: Function for calculation the lift coefficent, using a spline based on the provided value pairs.\ncalc_cd::Dierckx.Spline1D: Function for calculation the drag coefficent, using a spline based on the provided value pairs.\nv_wind::Any: wind vector at the height of the kite Default: zeros(S, 3)\nv_wind_gnd::Any: wind vector at reference height Default: zeros(S, 3)\nv_wind_tether::Any: wind vector used for the calculation of the tether drag Default: zeros(S, 3)\nv_apparent::Any: apparent wind vector at the kite Default: zeros(S, 3)\nv_app_perp::Any: vector, perpendicular to vapparent; output of calcdrag Default: zeros(S, 3)\nalpha_2::Any: angle of attack of the kite; output of setclcd! Default: 0.0\ndrag_force::Any: drag force of kite and bridle; output of calcaeroforces Default: zeros(S, 3)\nlift_force::Any: lift force of the kite; output of calcaeroforces Default: zeros(S, 3)\nsteering_force::Any: steering force acting on the kite; output of calcaeroforces Default: zeros(S, 3)\nlast_force::Any: Default: zeros(S, 3)\nspring_force::Any: spring force of the current tether segment, output of calc_res Default: zeros(S, 3)\ntotal_forces::Any: Default: zeros(S, 3)\nforce::Any: sum of spring and drag forces acting on the current segment, output of calc_res Default: zeros(S, 3)\nunit_vector::Any: unit vector in the direction of the current tether segment, output of calc_res Default: zeros(S, 3)\nav_vel::Any: average velocity of the current tether segment, output of calc_res Default: zeros(S, 3)\nkite_y::Any: y-vector of the kite fixed referense frame, output of calcaeroforces Default: zeros(S, 3)\nsegment::Any: vector representing one tether segment (p1-p2) Default: zeros(S, 3)\nlast_tether_drag::Any: vector of the drag force of the last calculated tether segment Default: zeros(S, 3)\nvec_z::Any: z vector of the kite reference frame Default: zeros(S, 3)\nres1::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: part one of the residual, difference between pos' and vel, non-flat, mainly for unit testing Default: zeros(SVector{P, KVec3})\nres2::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: part two of the residual, difference between vel' and acc, non-flat, mainly for unit testing Default: zeros(SVector{P, KVec3})\npos::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: vector of the positions of the particles Default: zeros(SVector{P, KVec3})\nvel_kite::Any: velocity vector of the kite Default: zeros(S, 3)\nseg_area::Any: area of one tether segment [m²] Default: zero(S)\nbridle_area::Any: total actual bridle area [m²] Default: zero(S)\nc_spring::Any: spring constant, depending on the length of the tether segment Default: zero(S)\nsegment_length::Any: unstressed segment length [m] Default: 0.0\ndamping::Any: damping factor, depending on the length of the tether segment Default: zero(S)\nlast_v_app_norm_tether::Any: last norm of the apparent wind speed at a tether segment [m/s] Default: zero(S)\nparam_cl::Any: lift coefficient of the kite, depending on the angle of attack Default: 0.2\nparam_cd::Any: drag coefficient of the kite, depending on the angle of attack Default: 1.0\ncor_steering::Any: correction term for the steering, in paper named i_(s,c), Eq. 30 Default: zero(S)\npsi::Any: azimuth angle in radian; inital value is zero Default: zero(S)\nbeta::Any: elevation angle in radian; initial value about 70 degrees Default: deg2rad((se()).elevation)\nalpha_depower::Any: depower angle [deg] Default: 0.0\nt_0::Any: relative start time of the current time interval Default: 0.0\nv_reel_out::Any: reel out speed of the winch [m/s] Default: 0.0\nlast_v_reel_out::Any: reel out speed during the last time step Default: 0.0\nl_tether::Any: unstretched tether length Default: 0.0\nrho::Any: air density at the height of the kite Default: 0.0\ndepower::Any: actual relative depower setting,  must be between    0 .. 1.0 Default: 0.0\nsteering::Any: actual relative steering setting, must be between -1.0 .. 1.0 Default: 0.0\nkcu_steering::Any: steering after the kcu, before applying offset and depower sensitivity, -1.0 .. 1.0 Default: 0.0\nstiffness_factor::Any: factor for the tether stiffness, used to find the steady state with a low stiffness first Default: 1.0\ninitial_masses::StaticArraysCore.MVector{P, S} where {S, P}: initial masses of the point masses Default: ones(P)\nmasses::StaticArraysCore.MVector{P, S} where {S, P}: current masses, depending on the total tether length Default: ones(P)\nforces::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: vector of the forces, acting on the particles Default: zeros(SVector{P, KVec3})\nsync_speed::Union{Nothing, S} where S: synchronous speed of the motor/ generator Default: 0.0\nset_torque::Union{Nothing, S} where S: set_torque of the motor/generator Default: nothing\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.KPS4","page":"Types","title":"KiteModels.KPS4","text":"mutable struct KPS4{S, T, P, Q, SP} <: AbstractKiteModel\n\nState of the kite power system, using a 4 point kite model. Parameters:\n\nS: Scalar type, e.g. SimFloat In the documentation mentioned as Any, but when used in this module it is always SimFloat and not Any.\nT: Vector type, e.g. MVector{3, SimFloat}\nP: number of points of the system, segments+1\nQ: number of springs in the system, P-1\nSP: struct type, describing a spring\n\nNormally a user of this package will not have to access any of the members of this type directly, use the input and output functions instead.\n\nset::Settings: Reference to the settings struct\nkcu::KCU: Reference to the KCU model (Kite Control Unit as implemented in the package KitePodModels\nam::AtmosphericModel: Reference to the atmospheric model as implemented in the package AtmosphericModels Default: AtmosphericModel(set)\nwm::AbstractWinchModel: Reference to winch model as implemented in the package WinchModels\nintegrator::Union{Nothing, OrdinaryDiffEqCore.ODEIntegrator, Sundials.IDAIntegrator}: Integrator, storing the current state Default: nothing\niter::Int64: Iterations, number of calls to the function residual! Default: 0\ncalc_cl::Dierckx.Spline1D: Function for calculation the lift coefficient, using a spline based on the provided value pairs.\ncalc_cd::Dierckx.Spline1D: Function for calculation the drag coefficient, using a spline based on the provided value pairs.\nv_wind::Any: wind vector at the height of the kite Default: zeros(S, 3)\nv_wind_gnd::Any: wind vector at reference height Default: zeros(S, 3)\nv_wind_tether::Any: wind vector used for the calculation of the tether drag Default: zeros(S, 3)\nv_apparent::Any: apparent wind vector at the kite Default: zeros(S, 3)\nbridle_factor::Any: bridlefactor = set.lbridle/bridle_length(set) Default: 1.0\nside_cl::Any: side lift coefficient, the difference of the left and right lift coefficients Default: 0.0\ndrag_force::Any: drag force of kite and bridle; output of calcaeroforces! Default: zeros(S, 3)\nside_force::Any: side_force acting on the kite Default: zeros(S, 3)\nf_d::Any: Default: zeros(S, 3)\nf_s::Any: Default: zeros(S, 3)\nks::Any: max_steering angle in radian Default: 0.0\nlift_force::Any: lift force of the kite; output of calcaeroforces! Default: zeros(S, 3)\nspring_force::Any: spring force of the current tether segment, output of calcparticleforces! Default: zeros(S, 3)\nlast_force::Any: last winch force Default: zeros(S, 3)\nres1::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: a copy of the residual one (pos,vel) for debugging and unit tests Default: zeros(SVector{P, KVec3})\nres2::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: a copy of the residual two (vel,acc) for debugging and unit tests Default: zeros(SVector{P, KVec3})\npos::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: a copy of the actual positions as output for the user Default: zeros(SVector{P, KVec3})\nvel::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: a copy of the actual velocities as output for the user Default: zeros(SVector{P, KVec3})\nvel_kite::Any: velocity vector of the kite Default: zeros(S, 3)\nsegment_length::Any: unstressed segment length [m] Default: 0.0\nparam_cl::Any: lift coefficient of the kite, depending on the angle of attack Default: 0.2\nparam_cd::Any: drag coefficient of the kite, depending on the angle of attack Default: 1.0\npsi::Any: azimuth angle in radian; initial value is zero Default: zero(S)\nalpha_depower::Any: depower angle [deg] Default: 0.0\npitch::Any: pitch angle [rad] Default: 0.0\npitch_rate::Any: pitch rate [rad/s] Default: 0.0\nalpha_2::Any: aoa at particle B Default: 0.0\nalpha_3::Any: aoa at particle C Default: 0.0\nalpha_4::Any: aoa at particle D Default: 0.0\nside_slip::Any: side_slip angle [rad] Default: 0.0\nt_0::Any: relative start time of the current time interval Default: 0.0\nv_reel_out::Any: reel out speed of the winch Default: 0.0\nlast_v_reel_out::Any: reel out speed at the last time step Default: 0.0\nl_tether::Any: unstretched tether length Default: 0.0\nrho::Any: air density at the height of the kite Default: 0.0\ndepower::Any: actual relative depower setting,  must be between    0 .. 1.0 Default: 0.0\nsteering::Any: actual relative steering setting, must be between -1.0 .. 1.0 Default: 0.0\nkcu_steering::Any: steering after the kcu, before applying offset and depower sensitivity, -1.0 .. 1.0 Default: 0.0\nstiffness_factor::Any: multiplier for the stiffniss of tether and bridle Default: 1.0\ninitial_masses::StaticArraysCore.MVector{P, S} where {S, P}: initial masses of the point masses Default: ones(P)\nmasses::StaticArraysCore.MVector{P, S} where {S, P}: current masses, depending on the total tether length Default: zeros(P)\nsprings::StaticArraysCore.MVector: vector of the springs, defined as struct Default: zeros(SP, Q)\nforces::StaticArraysCore.SVector{P, StaticArraysCore.MVector{3, Float64}} where P: vector of the forces, acting on the particles Default: zeros(SVector{P, KVec3})\nsync_speed::Union{Nothing, S} where S: synchronous speed of the motor/ generator Default: 0.0\nset_torque::Union{Nothing, S} where S: set_torque of the motor/generator Default: nothing\nset_force::Union{Nothing, S} where S: set value of the force at the winch, for logging only Default: nothing\nbearing::Union{Nothing, S} where S: set value of the bearing angle in radians, for logging only Default: nothing\nattractor::Union{Nothing, StaticArraysCore.SVector{2, S}} where S: coordinates of the attractor point [azimuth, elevation] in radian, for logging only Default: nothing\nx::Any: x vector of kite reference frame Default: zeros(S, 3)\ny::Any: y vector of kite reference frame Default: zeros(S, 3)\nz::Any: z vector of kite reference frame Default: zeros(S, 3)\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.SymbolicAWEModel","page":"Types","title":"KiteModels.SymbolicAWEModel","text":"mutable struct SymbolicAWEModel{S, V, P} <: AbstractKiteModel\n\nState of the kite power system, using a quaternion kite model and three steering lines to the ground. Parameters:\n\nS: Scalar type, e.g. SimFloat In the documentation mentioned as Any, but when used in this module it is always SimFloat and not Any.\nV: Vector type, e.g. KVec3\nP: number of tether points of the system, 3segments+3\n\nNormally a user of this package will not have to access any of the members of this type directly, use the input and output functions instead.\n\nset::Settings: Reference to the settings struct\nsys_struct::SystemStructure: Reference to the point mass system with points, segments, pulleys and tethers\nserialized_model::KiteModels.SerializedModel\nam::AtmosphericModel: Reference to the atmospheric model as implemented in the package AtmosphericModels Default: AtmosphericModel(set)\nintegrator::Union{Nothing, OrdinaryDiffEqCore.ODEIntegrator}: Default: nothing\nt_0::Float64: relative start time of the current time interval Default: 0.0\niter::Int64: Number of solve! calls Default: 0\nt_vsm::Float64: Default: zero(SimFloat)\nt_step::Float64: Default: zero(SimFloat)\nset_tether_length::Vector{Float64}: Default: zeros(SimFloat, 3)\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"These structs store the state of the one point model and four point model. Only in unit tests it is allowed to access the members directly, otherwise use the input and output functions.","category":"page"}]
}
